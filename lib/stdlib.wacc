begin
    # Returns absolute value of an int
    int abs(int x) is
      if x < 0 then
        x = -x
      else
        skip
      fi;
      return x
    end

    # Returns the max element of an array of ints
    int max(int[] arr) is
      int length = len arr;
      if length == 0 then
        return 0
      else
        int cnt = 1;
        int max = arr[0];
        while (cnt < length) do
          int e = arr[cnt];
          if e > max then
            max = e
          else
            skip
          fi;
          cnt = cnt + 1
        done;
        return max
      fi
    end

    # Sorts an array of ints in ascending order
    int[] sort(int[] arr) is
      int length = len arr;
      int i = 0;
      while (i < length) do
        int min = i;
        int j = i + 1;
        while (j < length) do
          if (arr[j] < arr[min]) then
            min = j
          else
            skip
          fi;
          j = j + 1
        done;

        if (min != i) then
          int tmp = arr[i];
          arr[i] = arr[min];
          arr[min] = tmp
        else
          skip
        fi;

        i = i + 1
      done;
      return arr
    end

    # Prints an array of ints
    bool printIntArray(int[] arr) is
      int length = len arr;
      int i = 0;
      print "[";
      while (i < length) do
        print arr[i];
        if (i != length - 1) then
          print ", "
        else
          skip
        fi;
        i = i + 1
      done;
      println "]";
      return true
    end

    # Prints an array of strings
    bool printStringArray(string[] arr) is
      int length = len arr;
      int i = 0;
      print "[";
      while (i < length) do
        print arr[i];
        if (i != length - 1) then
          print ", "
        else
          skip
        fi;
        i = i + 1
      done;
      println "]";
      return true
    end

    # Returns quotient and remainder of division
    pair(int, int) divide(int dividend, int divisor) is
      int quotient = dividend / divisor;
      int remainder = dividend - (quotient * divisor);
      pair(int, int) res = newpair(quotient, remainder);
      return res
    end

    # Performs a linear scan on an array of ints and returns the index of the number if it exists, if not -1.
    int indexOf(int[] arr, int target) is
      int idx = 0;
      int length = len arr;
      while (idx < length) do
        int elem = arr[idx];
        if (elem == target) then
          return idx
        else
          idx = idx + 1
        fi
      done;
      return -1
    end

    # Performs a binary search on an array of ints and returns the index of the number if it exists, if not -1.
    # Array must be sorted
    int binSearchIndexOf(int[] arr, int target) is
      int lo = 0;
      int hi = (len arr) - 1;
      while (lo <= hi) do
        int mid = (lo + hi) / 2;
        int elem = arr[mid];
        if (elem == target) then
          return mid
        else
          if (elem < target) then
            lo = mid + 1
          else
            hi = mid - 1
          fi
        fi
      done;
      return -1
    end

    # Returns the first arg to the power of the second arg
    int power(int base, int exponent) is
      int res = 1;
      int cnt = 0;
      while(cnt < exponent) do
        res = res * base;
        cnt = cnt + 1
      done;
      return res
    end

    skip
end
