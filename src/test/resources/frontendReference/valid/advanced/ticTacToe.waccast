-- Compiling...
-- Printing AST...
ticTacToe.ast contents are:
===========================================================
0	Program
1	  - char chooseSymbol()
2	    - PRINTLN
3	      - "========= Tic Tac Toe ================"
4	    - PRINTLN
5	      - "=  Because we know you want to win   ="
6	    - PRINTLN
7	      - "======================================"
8	    - PRINTLN
9	      - "=                                    ="
10	    - PRINTLN
11	      - "= Who would you like to be?          ="
12	    - PRINTLN
13	      - "=   x  (play first)                  ="
14	    - PRINTLN
15	      - "=   o  (play second)                 ="
16	    - PRINTLN
17	      - "=   q  (quit)                        ="
18	    - PRINTLN
19	      - "=                                    ="
20	    - PRINTLN
21	      - "======================================"
22	    - DECLARE
23	      - TYPE
24	        - char
25	      - LHS
26	        - chosen
27	      - RHS
28	        - '\0'
29	    - LOOP
30	      - CONDITION
31	        - ==
32	          - chosen
33	          - '\0'
34	      - DO
35	        - PRINT
36	          - "Which symbol you would like to choose: "
37	        - DECLARE
38	          - TYPE
39	            - char
40	          - LHS
41	            - c
42	          - RHS
43	            - '\0'
44	        - READ
45	          - c
46	        - IF
47	          - CONDITION
48	            - ||
49	              - ==
50	                - c
51	                - 'x'
52	              - ==
53	                - c
54	                - 'X'
55	          - THEN
56	            - ASSIGNMENT
57	              - LHS
58	                - chosen
59	              - RHS
60	                - 'x'
61	          - ELSE
62	            - IF
63	              - CONDITION
64	                - ||
65	                  - ==
66	                    - c
67	                    - 'o'
68	                  - ==
69	                    - c
70	                    - 'O'
71	              - THEN
72	                - ASSIGNMENT
73	                  - LHS
74	                    - chosen
75	                  - RHS
76	                    - 'o'
77	              - ELSE
78	                - IF
79	                  - CONDITION
80	                    - ||
81	                      - ==
82	                        - c
83	                        - 'q'
84	                      - ==
85	                        - c
86	                        - 'Q'
87	                  - THEN
88	                    - PRINTLN
89	                      - "Goodbye safety."
90	                    - EXIT
91	                      - 0
92	                  - ELSE
93	                    - PRINT
94	                      - "Invalid symbol: "
95	                    - PRINTLN
96	                      - c
97	                    - PRINTLN
98	                      - "Please try again."
99	    - PRINT
100	      - "You have chosen: "
101	    - PRINTLN
102	      - chosen
103	    - RETURN
104	      - chosen
105	  - bool printBoard(pair(pair,pair) board)
106	    - DECLARE
107	      - TYPE
108	        - pair(pair,pair)
109	      - LHS
110	        - front
111	      - RHS
112	        - FST
113	          - board
114	    - DECLARE
115	      - TYPE
116	        - pair(pair,char)
117	      - LHS
118	        - row1
119	      - RHS
120	        - FST
121	          - front
122	    - DECLARE
123	      - TYPE
124	        - pair(pair,char)
125	      - LHS
126	        - row2
127	      - RHS
128	        - SND
129	          - front
130	    - DECLARE
131	      - TYPE
132	        - pair(pair,char)
133	      - LHS
134	        - row3
135	      - RHS
136	        - SND
137	          - board
138	    - PRINTLN
139	      - " 1 2 3"
140	    - PRINT
141	      - "1"
142	    - DECLARE
143	      - TYPE
144	        - bool
145	      - LHS
146	        - _
147	      - RHS
148	        - printRow
149	        - row1
150	    - PRINTLN
151	      - " -+-+-"
152	    - PRINT
153	      - "2"
154	    - ASSIGNMENT
155	      - LHS
156	        - _
157	      - RHS
158	        - printRow
159	        - row2
160	    - PRINTLN
161	      - " -+-+-"
162	    - PRINT
163	      - "3"
164	    - ASSIGNMENT
165	      - LHS
166	        - _
167	      - RHS
168	        - printRow
169	        - row3
170	    - PRINTLN
171	      - ""
172	    - RETURN
173	      - true
174	  - bool printRow(pair(pair,char) row)
175	    - DECLARE
176	      - TYPE
177	        - pair(char,char)
178	      - LHS
179	        - front
180	      - RHS
181	        - FST
182	          - row
183	    - DECLARE
184	      - TYPE
185	        - char
186	      - LHS
187	        - cell1
188	      - RHS
189	        - FST
190	          - front
191	    - DECLARE
192	      - TYPE
193	        - char
194	      - LHS
195	        - cell2
196	      - RHS
197	        - SND
198	          - front
199	    - DECLARE
200	      - TYPE
201	        - char
202	      - LHS
203	        - cell3
204	      - RHS
205	        - SND
206	          - row
207	    - DECLARE
208	      - TYPE
209	        - bool
210	      - LHS
211	        - _
212	      - RHS
213	        - printCell
214	        - cell1
215	    - PRINT
216	      - '|'
217	    - ASSIGNMENT
218	      - LHS
219	        - _
220	      - RHS
221	        - printCell
222	        - cell2
223	    - PRINT
224	      - '|'
225	    - ASSIGNMENT
226	      - LHS
227	        - _
228	      - RHS
229	        - printCell
230	        - cell3
231	    - PRINTLN
232	      - ""
233	    - RETURN
234	      - true
235	  - bool printCell(char cell)
236	    - IF
237	      - CONDITION
238	        - ==
239	          - cell
240	          - '\0'
241	      - THEN
242	        - PRINT
243	          - ' '
244	      - ELSE
245	        - PRINT
246	          - cell
247	    - RETURN
248	      - true
249	  - bool askForAMoveHuman(pair(pair,pair) board, int[] move)
250	    - DECLARE
251	      - TYPE
252	        - bool
253	      - LHS
254	        - success
255	      - RHS
256	        - false
257	    - DECLARE
258	      - TYPE
259	        - int
260	      - LHS
261	        - row
262	      - RHS
263	        - 0
264	    - DECLARE
265	      - TYPE
266	        - int
267	      - LHS
268	        - column
269	      - RHS
270	        - 0
271	    - LOOP
272	      - CONDITION
273	        - !
274	          - success
275	      - DO
276	        - PRINTLN
277	          - "What is your next move?"
278	        - PRINT
279	          - " row (1-3): "
280	        - READ
281	          - row
282	        - PRINT
283	          - " column (1-3): "
284	        - READ
285	          - column
286	        - ASSIGNMENT
287	          - LHS
288	            - success
289	          - RHS
290	            - validateMove
291	            - board
292	            - row
293	            - column
294	        - IF
295	          - CONDITION
296	            - success
297	          - THEN
298	            - PRINTLN
299	              - ""
300	            - ASSIGNMENT
301	              - LHS
302	                - move
303	                  - []
304	                    - 0
305	              - RHS
306	                - row
307	            - ASSIGNMENT
308	              - LHS
309	                - move
310	                  - []
311	                    - 1
312	              - RHS
313	                - column
314	            - RETURN
315	              - true
316	          - ELSE
317	            - PRINTLN
318	              - "Your move is invalid. Please try again."
319	    - RETURN
320	      - true
321	  - bool validateMove(pair(pair,pair) board, int moveRow, int moveColumn)
322	    - IF
323	      - CONDITION
324	        - &&
325	          - &&
326	            - &&
327	              - <=
328	                - 1
329	                - moveRow
330	              - <=
331	                - moveRow
332	                - 3
333	            - <=
334	              - 1
335	              - moveColumn
336	          - <=
337	            - moveColumn
338	            - 3
339	      - THEN
340	        - DECLARE
341	          - TYPE
342	            - char
343	          - LHS
344	            - sym
345	          - RHS
346	            - symbolAt
347	            - board
348	            - moveRow
349	            - moveColumn
350	        - RETURN
351	          - ==
352	            - sym
353	            - '\0'
354	      - ELSE
355	        - RETURN
356	          - false
357	  - bool notifyMoveHuman(pair(pair,pair) board, char currentTurn, char playerSymbol, int moveRow, int moveColumn)
358	    - PRINT
359	      - "The AI played at row "
360	    - PRINT
361	      - moveRow
362	    - PRINT
363	      - " column "
364	    - PRINTLN
365	      - moveColumn
366	    - RETURN
367	      - true
368	  - pair(pair,pair) initAI(char aiSymbol)
369	    - DECLARE
370	      - TYPE
371	        - pair(char,pair)
372	      - LHS
373	        - info
374	      - RHS
375	        - NEW_PAIR
376	          - FST
377	            - aiSymbol
378	          - SND
379	            - null
380	    - DECLARE
381	      - TYPE
382	        - pair(pair,int)
383	      - LHS
384	        - stateTree
385	      - RHS
386	        - generateAllPossibleStates
387	        - aiSymbol
388	    - DECLARE
389	      - TYPE
390	        - int
391	      - LHS
392	        - value
393	      - RHS
394	        - setValuesForAllStates
395	        - stateTree
396	        - aiSymbol
397	        - 'x'
398	    - DECLARE
399	      - TYPE
400	        - pair(pair,pair)
401	      - LHS
402	        - aiData
403	      - RHS
404	        - NEW_PAIR
405	          - FST
406	            - info
407	          - SND
408	            - stateTree
409	    - RETURN
410	      - aiData
411	  - pair(pair,int) generateAllPossibleStates(char aiSymbol)
412	    - DECLARE
413	      - TYPE
414	        - pair(pair,pair)
415	      - LHS
416	        - board
417	      - RHS
418	        - allocateNewBoard
419	    - DECLARE
420	      - TYPE
421	        - pair(pair,int)
422	      - LHS
423	        - rootState
424	      - RHS
425	        - convertFromBoardToState
426	        - board
427	    - ASSIGNMENT
428	      - LHS
429	        - rootState
430	      - RHS
431	        - generateNextStates
432	        - rootState
433	        - 'x'
434	    - RETURN
435	      - rootState
436	  - pair(pair,int) convertFromBoardToState(pair(pair,pair) board)
437	    - DECLARE
438	      - TYPE
439	        - pair(pair,pair)
440	      - LHS
441	        - pointers
442	      - RHS
443	        - generateEmptyPointerBoard
444	    - DECLARE
445	      - TYPE
446	        - pair(pair,pair)
447	      - LHS
448	        - front
449	      - RHS
450	        - NEW_PAIR
451	          - FST
452	            - board
453	          - SND
454	            - pointers
455	    - DECLARE
456	      - TYPE
457	        - pair(pair,int)
458	      - LHS
459	        - state
460	      - RHS
461	        - NEW_PAIR
462	          - FST
463	            - front
464	          - SND
465	            - 0
466	    - RETURN
467	      - state
468	  - pair(pair,pair) generateEmptyPointerBoard()
469	    - DECLARE
470	      - TYPE
471	        - pair(pair,pair)
472	      - LHS
473	        - row1
474	      - RHS
475	        - generateEmptyPointerRow
476	    - DECLARE
477	      - TYPE
478	        - pair(pair,pair)
479	      - LHS
480	        - row2
481	      - RHS
482	        - generateEmptyPointerRow
483	    - DECLARE
484	      - TYPE
485	        - pair(pair,pair)
486	      - LHS
487	        - row3
488	      - RHS
489	        - generateEmptyPointerRow
490	    - DECLARE
491	      - TYPE
492	        - pair(pair,pair)
493	      - LHS
494	        - front
495	      - RHS
496	        - NEW_PAIR
497	          - FST
498	            - row1
499	          - SND
500	            - row2
501	    - DECLARE
502	      - TYPE
503	        - pair(pair,pair)
504	      - LHS
505	        - root
506	      - RHS
507	        - NEW_PAIR
508	          - FST
509	            - front
510	          - SND
511	            - row3
512	    - RETURN
513	      - root
514	  - pair(pair,pair) generateEmptyPointerRow()
515	    - DECLARE
516	      - TYPE
517	        - pair(pair,pair)
518	      - LHS
519	        - front
520	      - RHS
521	        - NEW_PAIR
522	          - FST
523	            - null
524	          - SND
525	            - null
526	    - DECLARE
527	      - TYPE
528	        - pair(pair,pair)
529	      - LHS
530	        - root
531	      - RHS
532	        - NEW_PAIR
533	          - FST
534	            - front
535	          - SND
536	            - null
537	    - RETURN
538	      - root
539	  - pair(pair,int) generateNextStates(pair(pair,int) state, char currentPlayer)
540	    - DECLARE
541	      - TYPE
542	        - pair(pair,pair)
543	      - LHS
544	        - front
545	      - RHS
546	        - FST
547	          - state
548	    - DECLARE
549	      - TYPE
550	        - pair(pair,pair)
551	      - LHS
552	        - board
553	      - RHS
554	        - FST
555	          - front
556	    - DECLARE
557	      - TYPE
558	        - pair(pair,pair)
559	      - LHS
560	        - pointers
561	      - RHS
562	        - SND
563	          - front
564	    - DECLARE
565	      - TYPE
566	        - char
567	      - LHS
568	        - previousPlayer
569	      - RHS
570	        - oppositeSymbol
571	        - currentPlayer
572	    - DECLARE
573	      - TYPE
574	        - bool
575	      - LHS
576	        - won
577	      - RHS
578	        - hasWon
579	        - board
580	        - previousPlayer
581	    - IF
582	      - CONDITION
583	        - won
584	      - THEN
585	        - RETURN
586	          - state
587	      - ELSE
588	        - DECLARE
589	          - TYPE
590	            - bool
591	          - LHS
592	            - _
593	          - RHS
594	            - generateNextStatesBoard
595	            - board
596	            - pointers
597	            - currentPlayer
598	        - RETURN
599	          - state
600	  - bool generateNextStatesBoard(pair(pair,pair) board, pair(pair,pair) pointers, char currentPlayer)
601	    - DECLARE
602	      - TYPE
603	        - pair(pair,pair)
604	      - LHS
605	        - front
606	      - RHS
607	        - FST
608	          - board
609	    - DECLARE
610	      - TYPE
611	        - pair(pair,char)
612	      - LHS
613	        - row1
614	      - RHS
615	        - FST
616	          - front
617	    - DECLARE
618	      - TYPE
619	        - pair(pair,char)
620	      - LHS
621	        - row2
622	      - RHS
623	        - SND
624	          - front
625	    - DECLARE
626	      - TYPE
627	        - pair(pair,char)
628	      - LHS
629	        - row3
630	      - RHS
631	        - SND
632	          - board
633	    - DECLARE
634	      - TYPE
635	        - pair(pair,pair)
636	      - LHS
637	        - frontP
638	      - RHS
639	        - FST
640	          - pointers
641	    - DECLARE
642	      - TYPE
643	        - pair(pair,pair)
644	      - LHS
645	        - row1P
646	      - RHS
647	        - FST
648	          - frontP
649	    - DECLARE
650	      - TYPE
651	        - pair(pair,pair)
652	      - LHS
653	        - row2P
654	      - RHS
655	        - SND
656	          - frontP
657	    - DECLARE
658	      - TYPE
659	        - pair(pair,pair)
660	      - LHS
661	        - row3P
662	      - RHS
663	        - SND
664	          - pointers
665	    - DECLARE
666	      - TYPE
667	        - bool
668	      - LHS
669	        - _
670	      - RHS
671	        - generateNextStatesRow
672	        - board
673	        - row1
674	        - row1P
675	        - currentPlayer
676	        - 1
677	    - ASSIGNMENT
678	      - LHS
679	        - _
680	      - RHS
681	        - generateNextStatesRow
682	        - board
683	        - row2
684	        - row2P
685	        - currentPlayer
686	        - 2
687	    - ASSIGNMENT
688	      - LHS
689	        - _
690	      - RHS
691	        - generateNextStatesRow
692	        - board
693	        - row3
694	        - row3P
695	        - currentPlayer
696	        - 3
697	    - RETURN
698	      - true
699	  - bool generateNextStatesRow(pair(pair,pair) board, pair(pair,char) row, pair(pair,pair) pointerRow, char currentPlayer, int rowNumber)
700	    - DECLARE
701	      - TYPE
702	        - pair(char,char)
703	      - LHS
704	        - front
705	      - RHS
706	        - FST
707	          - row
708	    - DECLARE
709	      - TYPE
710	        - char
711	      - LHS
712	        - cell1
713	      - RHS
714	        - FST
715	          - front
716	    - DECLARE
717	      - TYPE
718	        - char
719	      - LHS
720	        - cell2
721	      - RHS
722	        - SND
723	          - front
724	    - DECLARE
725	      - TYPE
726	        - char
727	      - LHS
728	        - cell3
729	      - RHS
730	        - SND
731	          - row
732	    - DECLARE
733	      - TYPE
734	        - pair(pair,pair)
735	      - LHS
736	        - frontP
737	      - RHS
738	        - FST
739	          - pointerRow
740	    - ASSIGNMENT
741	      - LHS
742	        - FST
743	          - frontP
744	      - RHS
745	        - generateNextStatesCell
746	        - board
747	        - cell1
748	        - currentPlayer
749	        - rowNumber
750	        - 1
751	    - ASSIGNMENT
752	      - LHS
753	        - SND
754	          - frontP
755	      - RHS
756	        - generateNextStatesCell
757	        - board
758	        - cell2
759	        - currentPlayer
760	        - rowNumber
761	        - 2
762	    - ASSIGNMENT
763	      - LHS
764	        - SND
765	          - pointerRow
766	      - RHS
767	        - generateNextStatesCell
768	        - board
769	        - cell3
770	        - currentPlayer
771	        - rowNumber
772	        - 3
773	    - RETURN
774	      - true
775	  - pair(pair,int) generateNextStatesCell(pair(pair,pair) board, char cell, char currentPlayer, int rowNumber, int columnNumber)
776	    - IF
777	      - CONDITION
778	        - ==
779	          - cell
780	          - '\0'
781	      - THEN
782	        - DECLARE
783	          - TYPE
784	            - pair(pair,pair)
785	          - LHS
786	            - board2
787	          - RHS
788	            - cloneBoard
789	            - board
790	        - DECLARE
791	          - TYPE
792	            - bool
793	          - LHS
794	            - _
795	          - RHS
796	            - placeMove
797	            - board2
798	            - currentPlayer
799	            - rowNumber
800	            - columnNumber
801	        - DECLARE
802	          - TYPE
803	            - pair(pair,int)
804	          - LHS
805	            - state
806	          - RHS
807	            - convertFromBoardToState
808	            - board2
809	        - DECLARE
810	          - TYPE
811	            - char
812	          - LHS
813	            - nextPlayer
814	          - RHS
815	            - oppositeSymbol
816	            - currentPlayer
817	        - ASSIGNMENT
818	          - LHS
819	            - state
820	          - RHS
821	            - generateNextStates
822	            - state
823	            - nextPlayer
824	        - RETURN
825	          - state
826	      - ELSE
827	        - RETURN
828	          - null
829	  - pair(pair,pair) cloneBoard(pair(pair,pair) board)
830	    - DECLARE
831	      - TYPE
832	        - pair(pair,pair)
833	      - LHS
834	        - board2
835	      - RHS
836	        - allocateNewBoard
837	    - DECLARE
838	      - TYPE
839	        - bool
840	      - LHS
841	        - _
842	      - RHS
843	        - copyBoard
844	        - board
845	        - board2
846	    - RETURN
847	      - board2
848	  - bool copyBoard(pair(pair,pair) from, pair(pair,pair) to)
849	    - DECLARE
850	      - TYPE
851	        - pair(pair,pair)
852	      - LHS
853	        - frontFrom
854	      - RHS
855	        - FST
856	          - from
857	    - DECLARE
858	      - TYPE
859	        - pair(pair,char)
860	      - LHS
861	        - row1From
862	      - RHS
863	        - FST
864	          - frontFrom
865	    - DECLARE
866	      - TYPE
867	        - pair(pair,char)
868	      - LHS
869	        - row2From
870	      - RHS
871	        - SND
872	          - frontFrom
873	    - DECLARE
874	      - TYPE
875	        - pair(pair,char)
876	      - LHS
877	        - row3From
878	      - RHS
879	        - SND
880	          - from
881	    - DECLARE
882	      - TYPE
883	        - pair(pair,pair)
884	      - LHS
885	        - frontTo
886	      - RHS
887	        - FST
888	          - to
889	    - DECLARE
890	      - TYPE
891	        - pair(pair,char)
892	      - LHS
893	        - row1To
894	      - RHS
895	        - FST
896	          - frontTo
897	    - DECLARE
898	      - TYPE
899	        - pair(pair,char)
900	      - LHS
901	        - row2To
902	      - RHS
903	        - SND
904	          - frontTo
905	    - DECLARE
906	      - TYPE
907	        - pair(pair,char)
908	      - LHS
909	        - row3To
910	      - RHS
911	        - SND
912	          - to
913	    - DECLARE
914	      - TYPE
915	        - bool
916	      - LHS
917	        - _
918	      - RHS
919	        - copyRow
920	        - row1From
921	        - row1To
922	    - ASSIGNMENT
923	      - LHS
924	        - _
925	      - RHS
926	        - copyRow
927	        - row2From
928	        - row2To
929	    - ASSIGNMENT
930	      - LHS
931	        - _
932	      - RHS
933	        - copyRow
934	        - row3From
935	        - row3To
936	    - RETURN
937	      - true
938	  - bool copyRow(pair(pair,char) from, pair(pair,char) to)
939	    - DECLARE
940	      - TYPE
941	        - pair(char,char)
942	      - LHS
943	        - frontFrom
944	      - RHS
945	        - FST
946	          - from
947	    - DECLARE
948	      - TYPE
949	        - pair(char,char)
950	      - LHS
951	        - frontTo
952	      - RHS
953	        - FST
954	          - to
955	    - ASSIGNMENT
956	      - LHS
957	        - FST
958	          - frontTo
959	      - RHS
960	        - FST
961	          - frontFrom
962	    - ASSIGNMENT
963	      - LHS
964	        - SND
965	          - frontTo
966	      - RHS
967	        - SND
968	          - frontFrom
969	    - ASSIGNMENT
970	      - LHS
971	        - SND
972	          - to
973	      - RHS
974	        - SND
975	          - from
976	    - RETURN
977	      - true
978	  - int setValuesForAllStates(pair(pair,int) state, char aiSymbol, char currentPlayer)
979	    - DECLARE
980	      - TYPE
981	        - int
982	      - LHS
983	        - outValue
984	      - RHS
985	        - 0
986	    - IF
987	      - CONDITION
988	        - ==
989	          - state
990	          - null
991	      - THEN
992	        - IF
993	          - CONDITION
994	            - ==
995	              - currentPlayer
996	              - aiSymbol
997	          - THEN
998	            - ASSIGNMENT
999	              - LHS
1000	                - outValue
1001	              - RHS
1002	                - 101
1003	          - ELSE
1004	            - ASSIGNMENT
1005	              - LHS
1006	                - outValue
1007	              - RHS
1008	                - -101
1009	      - ELSE
1010	        - DECLARE
1011	          - TYPE
1012	            - pair(pair,pair)
1013	          - LHS
1014	            - front
1015	          - RHS
1016	            - FST
1017	              - state
1018	        - DECLARE
1019	          - TYPE
1020	            - pair(pair,pair)
1021	          - LHS
1022	            - board
1023	          - RHS
1024	            - FST
1025	              - front
1026	        - DECLARE
1027	          - TYPE
1028	            - pair(pair,pair)
1029	          - LHS
1030	            - pointers
1031	          - RHS
1032	            - SND
1033	              - front
1034	        - DECLARE
1035	          - TYPE
1036	            - char
1037	          - LHS
1038	            - anotherPlayer
1039	          - RHS
1040	            - oppositeSymbol
1041	            - currentPlayer
1042	        - DECLARE
1043	          - TYPE
1044	            - bool
1045	          - LHS
1046	            - won
1047	          - RHS
1048	            - hasWon
1049	            - board
1050	            - anotherPlayer
1051	        - IF
1052	          - CONDITION
1053	            - won
1054	          - THEN
1055	            - IF
1056	              - CONDITION
1057	                - ==
1058	                  - anotherPlayer
1059	                  - aiSymbol
1060	              - THEN
1061	                - ASSIGNMENT
1062	                  - LHS
1063	                    - outValue
1064	                  - RHS
1065	                    - 100
1066	              - ELSE
1067	                - ASSIGNMENT
1068	                  - LHS
1069	                    - outValue
1070	                  - RHS
1071	                    - -100
1072	          - ELSE
1073	            - DECLARE
1074	              - TYPE
1075	                - bool
1076	              - LHS
1077	                - hasEmptyCell
1078	              - RHS
1079	                - containEmptyCell
1080	                - board
1081	            - IF
1082	              - CONDITION
1083	                - hasEmptyCell
1084	              - THEN
1085	                - ASSIGNMENT
1086	                  - LHS
1087	                    - outValue
1088	                  - RHS
1089	                    - calculateValuesFromNextStates
1090	                    - pointers
1091	                    - aiSymbol
1092	                    - anotherPlayer
1093	                - IF
1094	                  - CONDITION
1095	                    - ==
1096	                      - outValue
1097	                      - 100
1098	                  - THEN
1099	                    - ASSIGNMENT
1100	                      - LHS
1101	                        - outValue
1102	                      - RHS
1103	                        - 90
1104	                  - ELSE
1105	                    - SKIP
1106	              - ELSE
1107	                - ASSIGNMENT
1108	                  - LHS
1109	                    - outValue
1110	                  - RHS
1111	                    - 0
1112	        - ASSIGNMENT
1113	          - LHS
1114	            - SND
1115	              - state
1116	          - RHS
1117	            - outValue
1118	    - RETURN
1119	      - outValue
1120	  - int calculateValuesFromNextStates(pair(pair,pair) pointers, char aiSymbol, char playerOfNextState)
1121	    - DECLARE
1122	      - TYPE
1123	        - pair(pair,pair)
1124	      - LHS
1125	        - front
1126	      - RHS
1127	        - FST
1128	          - pointers
1129	    - DECLARE
1130	      - TYPE
1131	        - pair(pair,pair)
1132	      - LHS
1133	        - row1
1134	      - RHS
1135	        - FST
1136	          - front
1137	    - DECLARE
1138	      - TYPE
1139	        - pair(pair,pair)
1140	      - LHS
1141	        - row2
1142	      - RHS
1143	        - SND
1144	          - front
1145	    - DECLARE
1146	      - TYPE
1147	        - pair(pair,pair)
1148	      - LHS
1149	        - row3
1150	      - RHS
1151	        - SND
1152	          - pointers
1153	    - DECLARE
1154	      - TYPE
1155	        - int
1156	      - LHS
1157	        - value1
1158	      - RHS
1159	        - calculateValuesFromNextStatesRow
1160	        - row1
1161	        - aiSymbol
1162	        - playerOfNextState
1163	    - DECLARE
1164	      - TYPE
1165	        - int
1166	      - LHS
1167	        - value2
1168	      - RHS
1169	        - calculateValuesFromNextStatesRow
1170	        - row2
1171	        - aiSymbol
1172	        - playerOfNextState
1173	    - DECLARE
1174	      - TYPE
1175	        - int
1176	      - LHS
1177	        - value3
1178	      - RHS
1179	        - calculateValuesFromNextStatesRow
1180	        - row3
1181	        - aiSymbol
1182	        - playerOfNextState
1183	    - DECLARE
1184	      - TYPE
1185	        - int
1186	      - LHS
1187	        - out
1188	      - RHS
1189	        - combineValue
1190	        - aiSymbol
1191	        - playerOfNextState
1192	        - value1
1193	        - value2
1194	        - value3
1195	    - RETURN
1196	      - out
1197	  - int calculateValuesFromNextStatesRow(pair(pair,pair) rowPointers, char aiSymbol, char playerOfNextState)
1198	    - DECLARE
1199	      - TYPE
1200	        - pair(pair,pair)
1201	      - LHS
1202	        - front
1203	      - RHS
1204	        - FST
1205	          - rowPointers
1206	    - DECLARE
1207	      - TYPE
1208	        - pair(pair,int)
1209	      - LHS
1210	        - state1
1211	      - RHS
1212	        - FST
1213	          - front
1214	    - DECLARE
1215	      - TYPE
1216	        - pair(pair,int)
1217	      - LHS
1218	        - state2
1219	      - RHS
1220	        - SND
1221	          - front
1222	    - DECLARE
1223	      - TYPE
1224	        - pair(pair,int)
1225	      - LHS
1226	        - state3
1227	      - RHS
1228	        - SND
1229	          - rowPointers
1230	    - DECLARE
1231	      - TYPE
1232	        - int
1233	      - LHS
1234	        - value1
1235	      - RHS
1236	        - setValuesForAllStates
1237	        - state1
1238	        - aiSymbol
1239	        - playerOfNextState
1240	    - DECLARE
1241	      - TYPE
1242	        - int
1243	      - LHS
1244	        - value2
1245	      - RHS
1246	        - setValuesForAllStates
1247	        - state2
1248	        - aiSymbol
1249	        - playerOfNextState
1250	    - DECLARE
1251	      - TYPE
1252	        - int
1253	      - LHS
1254	        - value3
1255	      - RHS
1256	        - setValuesForAllStates
1257	        - state3
1258	        - aiSymbol
1259	        - playerOfNextState
1260	    - DECLARE
1261	      - TYPE
1262	        - int
1263	      - LHS
1264	        - out
1265	      - RHS
1266	        - combineValue
1267	        - aiSymbol
1268	        - playerOfNextState
1269	        - value1
1270	        - value2
1271	        - value3
1272	    - RETURN
1273	      - out
1274	  - int combineValue(char aiSymbol, char playerOfNextState, int value1, int value2, int value3)
1275	    - DECLARE
1276	      - TYPE
1277	        - int
1278	      - LHS
1279	        - out
1280	      - RHS
1281	        - 0
1282	    - IF
1283	      - CONDITION
1284	        - ==
1285	          - aiSymbol
1286	          - playerOfNextState
1287	      - THEN
1288	        - ASSIGNMENT
1289	          - LHS
1290	            - out
1291	          - RHS
1292	            - min3
1293	            - value1
1294	            - value2
1295	            - value3
1296	      - ELSE
1297	        - ASSIGNMENT
1298	          - LHS
1299	            - out
1300	          - RHS
1301	            - max3
1302	            - value1
1303	            - value2
1304	            - value3
1305	    - RETURN
1306	      - out
1307	  - int min3(int a, int b, int c)
1308	    - IF
1309	      - CONDITION
1310	        - <
1311	          - a
1312	          - b
1313	      - THEN
1314	        - IF
1315	          - CONDITION
1316	            - <
1317	              - a
1318	              - c
1319	          - THEN
1320	            - RETURN
1321	              - a
1322	          - ELSE
1323	            - RETURN
1324	              - c
1325	      - ELSE
1326	        - IF
1327	          - CONDITION
1328	            - <
1329	              - b
1330	              - c
1331	          - THEN
1332	            - RETURN
1333	              - b
1334	          - ELSE
1335	            - RETURN
1336	              - c
1337	  - int max3(int a, int b, int c)
1338	    - IF
1339	      - CONDITION
1340	        - >
1341	          - a
1342	          - b
1343	      - THEN
1344	        - IF
1345	          - CONDITION
1346	            - >
1347	              - a
1348	              - c
1349	          - THEN
1350	            - RETURN
1351	              - a
1352	          - ELSE
1353	            - RETURN
1354	              - c
1355	      - ELSE
1356	        - IF
1357	          - CONDITION
1358	            - >
1359	              - b
1360	              - c
1361	          - THEN
1362	            - RETURN
1363	              - b
1364	          - ELSE
1365	            - RETURN
1366	              - c
1367	  - bool destroyAI(pair(pair,pair) aiData)
1368	    - DECLARE
1369	      - TYPE
1370	        - pair(char,pair)
1371	      - LHS
1372	        - info
1373	      - RHS
1374	        - FST
1375	          - aiData
1376	    - DECLARE
1377	      - TYPE
1378	        - pair(pair,int)
1379	      - LHS
1380	        - stateTree
1381	      - RHS
1382	        - SND
1383	          - aiData
1384	    - DECLARE
1385	      - TYPE
1386	        - bool
1387	      - LHS
1388	        - _
1389	      - RHS
1390	        - deleteStateTreeRecursively
1391	        - stateTree
1392	    - FREE
1393	      - info
1394	    - FREE
1395	      - aiData
1396	    - RETURN
1397	      - true
1398	  - bool askForAMoveAI(pair(pair,pair) board, char currentTurn, char playerSymbol, pair(pair,pair) aiData, int[] move)
1399	    - DECLARE
1400	      - TYPE
1401	        - pair(char,pair)
1402	      - LHS
1403	        - info
1404	      - RHS
1405	        - FST
1406	          - aiData
1407	    - DECLARE
1408	      - TYPE
1409	        - pair(pair,int)
1410	      - LHS
1411	        - stateTree
1412	      - RHS
1413	        - SND
1414	          - aiData
1415	    - DECLARE
1416	      - TYPE
1417	        - pair(pair,pair)
1418	      - LHS
1419	        - front
1420	      - RHS
1421	        - FST
1422	          - stateTree
1423	    - DECLARE
1424	      - TYPE
1425	        - pair(pair,pair)
1426	      - LHS
1427	        - pointers
1428	      - RHS
1429	        - SND
1430	          - front
1431	    - DECLARE
1432	      - TYPE
1433	        - int
1434	      - LHS
1435	        - stateValue
1436	      - RHS
1437	        - SND
1438	          - stateTree
1439	    - DECLARE
1440	      - TYPE
1441	        - bool
1442	      - LHS
1443	        - _
1444	      - RHS
1445	        - findTheBestMove
1446	        - pointers
1447	        - stateValue
1448	        - move
1449	    - PRINTLN
1450	      - "AI is cleaning up its memory..."
1451	    - ASSIGNMENT
1452	      - LHS
1453	        - SND
1454	          - aiData
1455	      - RHS
1456	        - deleteAllOtherChildren
1457	        - pointers
1458	        - move
1459	          - []
1460	            - 0
1461	        - move
1462	          - []
1463	            - 1
1464	    - ASSIGNMENT
1465	      - LHS
1466	        - _
1467	      - RHS
1468	        - deleteThisStateOnly
1469	        - stateTree
1470	    - RETURN
1471	      - true
1472	  - bool findTheBestMove(pair(pair,pair) pointers, int stateValue, int[] move)
1473	    - IF
1474	      - CONDITION
1475	        - ==
1476	          - stateValue
1477	          - 90
1478	      - THEN
1479	        - DECLARE
1480	          - TYPE
1481	            - bool
1482	          - LHS
1483	            - found
1484	          - RHS
1485	            - findMoveWithGivenValue
1486	            - pointers
1487	            - 100
1488	            - move
1489	        - IF
1490	          - CONDITION
1491	            - found
1492	          - THEN
1493	            - RETURN
1494	              - true
1495	          - ELSE
1496	            - SKIP
1497	      - ELSE
1498	        - SKIP
1499	    - DECLARE
1500	      - TYPE
1501	        - bool
1502	      - LHS
1503	        - found
1504	      - RHS
1505	        - findMoveWithGivenValue
1506	        - pointers
1507	        - stateValue
1508	        - move
1509	    - IF
1510	      - CONDITION
1511	        - found
1512	      - THEN
1513	        - RETURN
1514	          - true
1515	      - ELSE
1516	        - PRINTLN
1517	          - "Internal Error: cannot find the next move for the AI"
1518	        - EXIT
1519	          - -1
1520	  - bool findMoveWithGivenValue(pair(pair,pair) pointers, int stateValue, int[] move)
1521	    - DECLARE
1522	      - TYPE
1523	        - pair(pair,pair)
1524	      - LHS
1525	        - front
1526	      - RHS
1527	        - FST
1528	          - pointers
1529	    - DECLARE
1530	      - TYPE
1531	        - pair(pair,pair)
1532	      - LHS
1533	        - row1
1534	      - RHS
1535	        - FST
1536	          - front
1537	    - DECLARE
1538	      - TYPE
1539	        - pair(pair,pair)
1540	      - LHS
1541	        - row2
1542	      - RHS
1543	        - SND
1544	          - front
1545	    - DECLARE
1546	      - TYPE
1547	        - pair(pair,pair)
1548	      - LHS
1549	        - row3
1550	      - RHS
1551	        - SND
1552	          - pointers
1553	    - DECLARE
1554	      - TYPE
1555	        - bool
1556	      - LHS
1557	        - find
1558	      - RHS
1559	        - findMoveWithGivenValueRow
1560	        - row1
1561	        - stateValue
1562	        - move
1563	    - IF
1564	      - CONDITION
1565	        - find
1566	      - THEN
1567	        - ASSIGNMENT
1568	          - LHS
1569	            - move
1570	              - []
1571	                - 0
1572	          - RHS
1573	            - 1
1574	      - ELSE
1575	        - ASSIGNMENT
1576	          - LHS
1577	            - find
1578	          - RHS
1579	            - findMoveWithGivenValueRow
1580	            - row2
1581	            - stateValue
1582	            - move
1583	        - IF
1584	          - CONDITION
1585	            - find
1586	          - THEN
1587	            - ASSIGNMENT
1588	              - LHS
1589	                - move
1590	                  - []
1591	                    - 0
1592	              - RHS
1593	                - 2
1594	          - ELSE
1595	            - ASSIGNMENT
1596	              - LHS
1597	                - find
1598	              - RHS
1599	                - findMoveWithGivenValueRow
1600	                - row3
1601	                - stateValue
1602	                - move
1603	            - IF
1604	              - CONDITION
1605	                - find
1606	              - THEN
1607	                - ASSIGNMENT
1608	                  - LHS
1609	                    - move
1610	                      - []
1611	                        - 0
1612	                  - RHS
1613	                    - 3
1614	              - ELSE
1615	                - RETURN
1616	                  - false
1617	    - RETURN
1618	      - true
1619	  - bool findMoveWithGivenValueRow(pair(pair,pair) rowPointers, int stateValue, int[] move)
1620	    - DECLARE
1621	      - TYPE
1622	        - pair(pair,pair)
1623	      - LHS
1624	        - front
1625	      - RHS
1626	        - FST
1627	          - rowPointers
1628	    - DECLARE
1629	      - TYPE
1630	        - pair(pair,int)
1631	      - LHS
1632	        - cell1
1633	      - RHS
1634	        - FST
1635	          - front
1636	    - DECLARE
1637	      - TYPE
1638	        - pair(pair,int)
1639	      - LHS
1640	        - cell2
1641	      - RHS
1642	        - SND
1643	          - front
1644	    - DECLARE
1645	      - TYPE
1646	        - pair(pair,int)
1647	      - LHS
1648	        - cell3
1649	      - RHS
1650	        - SND
1651	          - rowPointers
1652	    - DECLARE
1653	      - TYPE
1654	        - bool
1655	      - LHS
1656	        - find
1657	      - RHS
1658	        - hasGivenStateValue
1659	        - cell1
1660	        - stateValue
1661	    - IF
1662	      - CONDITION
1663	        - find
1664	      - THEN
1665	        - ASSIGNMENT
1666	          - LHS
1667	            - move
1668	              - []
1669	                - 1
1670	          - RHS
1671	            - 1
1672	      - ELSE
1673	        - ASSIGNMENT
1674	          - LHS
1675	            - find
1676	          - RHS
1677	            - hasGivenStateValue
1678	            - cell2
1679	            - stateValue
1680	        - IF
1681	          - CONDITION
1682	            - find
1683	          - THEN
1684	            - ASSIGNMENT
1685	              - LHS
1686	                - move
1687	                  - []
1688	                    - 1
1689	              - RHS
1690	                - 2
1691	          - ELSE
1692	            - ASSIGNMENT
1693	              - LHS
1694	                - find
1695	              - RHS
1696	                - hasGivenStateValue
1697	                - cell3
1698	                - stateValue
1699	            - IF
1700	              - CONDITION
1701	                - find
1702	              - THEN
1703	                - ASSIGNMENT
1704	                  - LHS
1705	                    - move
1706	                      - []
1707	                        - 1
1708	                  - RHS
1709	                    - 3
1710	              - ELSE
1711	                - RETURN
1712	                  - false
1713	    - RETURN
1714	      - true
1715	  - bool hasGivenStateValue(pair(pair,int) state, int stateValue)
1716	    - IF
1717	      - CONDITION
1718	        - ==
1719	          - state
1720	          - null
1721	      - THEN
1722	        - RETURN
1723	          - false
1724	      - ELSE
1725	        - DECLARE
1726	          - TYPE
1727	            - int
1728	          - LHS
1729	            - actual
1730	          - RHS
1731	            - SND
1732	              - state
1733	        - RETURN
1734	          - ==
1735	            - actual
1736	            - stateValue
1737	  - bool notifyMoveAI(pair(pair,pair) board, char currentTurn, char playerSymbol, pair(pair,pair) aiData, int moveRow, int moveColumn)
1738	    - DECLARE
1739	      - TYPE
1740	        - pair(pair,int)
1741	      - LHS
1742	        - stateTree
1743	      - RHS
1744	        - SND
1745	          - aiData
1746	    - DECLARE
1747	      - TYPE
1748	        - pair(pair,pair)
1749	      - LHS
1750	        - front
1751	      - RHS
1752	        - FST
1753	          - stateTree
1754	    - DECLARE
1755	      - TYPE
1756	        - pair(pair,pair)
1757	      - LHS
1758	        - pointers
1759	      - RHS
1760	        - SND
1761	          - front
1762	    - PRINTLN
1763	      - "AI is cleaning up its memory..."
1764	    - ASSIGNMENT
1765	      - LHS
1766	        - SND
1767	          - aiData
1768	      - RHS
1769	        - deleteAllOtherChildren
1770	        - pointers
1771	        - moveRow
1772	        - moveColumn
1773	    - DECLARE
1774	      - TYPE
1775	        - bool
1776	      - LHS
1777	        - _
1778	      - RHS
1779	        - deleteThisStateOnly
1780	        - stateTree
1781	    - RETURN
1782	      - true
1783	  - pair(pair,int) deleteAllOtherChildren(pair(pair,pair) pointers, int moveRow, int moveColumn)
1784	    - DECLARE
1785	      - TYPE
1786	        - pair(pair,pair)
1787	      - LHS
1788	        - front
1789	      - RHS
1790	        - FST
1791	          - pointers
1792	    - DECLARE
1793	      - TYPE
1794	        - pair(pair,pair)
1795	      - LHS
1796	        - row1
1797	      - RHS
1798	        - FST
1799	          - front
1800	    - DECLARE
1801	      - TYPE
1802	        - pair(pair,pair)
1803	      - LHS
1804	        - row2
1805	      - RHS
1806	        - SND
1807	          - front
1808	    - DECLARE
1809	      - TYPE
1810	        - pair(pair,pair)
1811	      - LHS
1812	        - row3
1813	      - RHS
1814	        - SND
1815	          - pointers
1816	    - DECLARE
1817	      - TYPE
1818	        - pair(pair,pair)
1819	      - LHS
1820	        - toKeepRow
1821	      - RHS
1822	        - null
1823	    - DECLARE
1824	      - TYPE
1825	        - pair(pair,pair)
1826	      - LHS
1827	        - toDeleteRow1
1828	      - RHS
1829	        - null
1830	    - DECLARE
1831	      - TYPE
1832	        - pair(pair,pair)
1833	      - LHS
1834	        - toDeleteRow2
1835	      - RHS
1836	        - null
1837	    - IF
1838	      - CONDITION
1839	        - ==
1840	          - moveRow
1841	          - 1
1842	      - THEN
1843	        - ASSIGNMENT
1844	          - LHS
1845	            - toKeepRow
1846	          - RHS
1847	            - row1
1848	        - ASSIGNMENT
1849	          - LHS
1850	            - toDeleteRow1
1851	          - RHS
1852	            - row2
1853	        - ASSIGNMENT
1854	          - LHS
1855	            - toDeleteRow2
1856	          - RHS
1857	            - row3
1858	      - ELSE
1859	        - ASSIGNMENT
1860	          - LHS
1861	            - toDeleteRow1
1862	          - RHS
1863	            - row1
1864	        - IF
1865	          - CONDITION
1866	            - ==
1867	              - moveRow
1868	              - 2
1869	          - THEN
1870	            - ASSIGNMENT
1871	              - LHS
1872	                - toKeepRow
1873	              - RHS
1874	                - row2
1875	            - ASSIGNMENT
1876	              - LHS
1877	                - toDeleteRow2
1878	              - RHS
1879	                - row3
1880	          - ELSE
1881	            - ASSIGNMENT
1882	              - LHS
1883	                - toKeepRow
1884	              - RHS
1885	                - row3
1886	            - ASSIGNMENT
1887	              - LHS
1888	                - toDeleteRow2
1889	              - RHS
1890	                - row2
1891	    - DECLARE
1892	      - TYPE
1893	        - pair(pair,int)
1894	      - LHS
1895	        - out
1896	      - RHS
1897	        - deleteAllOtherChildrenRow
1898	        - toKeepRow
1899	        - moveColumn
1900	    - DECLARE
1901	      - TYPE
1902	        - bool
1903	      - LHS
1904	        - _
1905	      - RHS
1906	        - deleteChildrenStateRecursivelyRow
1907	        - toDeleteRow1
1908	    - ASSIGNMENT
1909	      - LHS
1910	        - _
1911	      - RHS
1912	        - deleteChildrenStateRecursivelyRow
1913	        - toDeleteRow2
1914	    - RETURN
1915	      - out
1916	  - pair(pair,int) deleteAllOtherChildrenRow(pair(pair,pair) rowPointers, int moveColumn)
1917	    - DECLARE
1918	      - TYPE
1919	        - pair(pair,pair)
1920	      - LHS
1921	        - front
1922	      - RHS
1923	        - FST
1924	          - rowPointers
1925	    - DECLARE
1926	      - TYPE
1927	        - pair(pair,int)
1928	      - LHS
1929	        - cell1
1930	      - RHS
1931	        - FST
1932	          - front
1933	    - DECLARE
1934	      - TYPE
1935	        - pair(pair,int)
1936	      - LHS
1937	        - cell2
1938	      - RHS
1939	        - SND
1940	          - front
1941	    - DECLARE
1942	      - TYPE
1943	        - pair(pair,int)
1944	      - LHS
1945	        - cell3
1946	      - RHS
1947	        - SND
1948	          - rowPointers
1949	    - DECLARE
1950	      - TYPE
1951	        - pair(pair,int)
1952	      - LHS
1953	        - toKeepCell
1954	      - RHS
1955	        - null
1956	    - DECLARE
1957	      - TYPE
1958	        - pair(pair,int)
1959	      - LHS
1960	        - toDeleteCell1
1961	      - RHS
1962	        - null
1963	    - DECLARE
1964	      - TYPE
1965	        - pair(pair,int)
1966	      - LHS
1967	        - toDeleteCell2
1968	      - RHS
1969	        - null
1970	    - IF
1971	      - CONDITION
1972	        - ==
1973	          - moveColumn
1974	          - 1
1975	      - THEN
1976	        - ASSIGNMENT
1977	          - LHS
1978	            - toKeepCell
1979	          - RHS
1980	            - cell1
1981	        - ASSIGNMENT
1982	          - LHS
1983	            - toDeleteCell1
1984	          - RHS
1985	            - cell2
1986	        - ASSIGNMENT
1987	          - LHS
1988	            - toDeleteCell2
1989	          - RHS
1990	            - cell3
1991	      - ELSE
1992	        - ASSIGNMENT
1993	          - LHS
1994	            - toDeleteCell1
1995	          - RHS
1996	            - cell1
1997	        - IF
1998	          - CONDITION
1999	            - ==
2000	              - moveColumn
2001	              - 2
2002	          - THEN
2003	            - ASSIGNMENT
2004	              - LHS
2005	                - toKeepCell
2006	              - RHS
2007	                - cell2
2008	            - ASSIGNMENT
2009	              - LHS
2010	                - toDeleteCell2
2011	              - RHS
2012	                - cell3
2013	          - ELSE
2014	            - ASSIGNMENT
2015	              - LHS
2016	                - toKeepCell
2017	              - RHS
2018	                - cell3
2019	            - ASSIGNMENT
2020	              - LHS
2021	                - toDeleteCell2
2022	              - RHS
2023	                - cell2
2024	    - DECLARE
2025	      - TYPE
2026	        - bool
2027	      - LHS
2028	        - _
2029	      - RHS
2030	        - deleteStateTreeRecursively
2031	        - toDeleteCell1
2032	    - ASSIGNMENT
2033	      - LHS
2034	        - _
2035	      - RHS
2036	        - deleteStateTreeRecursively
2037	        - toDeleteCell2
2038	    - RETURN
2039	      - toKeepCell
2040	  - bool deleteStateTreeRecursively(pair(pair,int) stateTree)
2041	    - IF
2042	      - CONDITION
2043	        - ==
2044	          - stateTree
2045	          - null
2046	      - THEN
2047	        - RETURN
2048	          - true
2049	      - ELSE
2050	        - DECLARE
2051	          - TYPE
2052	            - pair(pair,pair)
2053	          - LHS
2054	            - front
2055	          - RHS
2056	            - FST
2057	              - stateTree
2058	        - DECLARE
2059	          - TYPE
2060	            - pair(pair,pair)
2061	          - LHS
2062	            - board
2063	          - RHS
2064	            - FST
2065	              - front
2066	        - DECLARE
2067	          - TYPE
2068	            - pair(pair,pair)
2069	          - LHS
2070	            - pointers
2071	          - RHS
2072	            - SND
2073	              - front
2074	        - DECLARE
2075	          - TYPE
2076	            - bool
2077	          - LHS
2078	            - _
2079	          - RHS
2080	            - deleteChildrenStateRecursively
2081	            - pointers
2082	        - ASSIGNMENT
2083	          - LHS
2084	            - _
2085	          - RHS
2086	            - deleteThisStateOnly
2087	            - stateTree
2088	        - RETURN
2089	          - true
2090	  - bool deleteThisStateOnly(pair(pair,int) stateTree)
2091	    - DECLARE
2092	      - TYPE
2093	        - pair(pair,pair)
2094	      - LHS
2095	        - front
2096	      - RHS
2097	        - FST
2098	          - stateTree
2099	    - DECLARE
2100	      - TYPE
2101	        - pair(pair,pair)
2102	      - LHS
2103	        - board
2104	      - RHS
2105	        - FST
2106	          - front
2107	    - DECLARE
2108	      - TYPE
2109	        - pair(pair,pair)
2110	      - LHS
2111	        - pointers
2112	      - RHS
2113	        - SND
2114	          - front
2115	    - DECLARE
2116	      - TYPE
2117	        - bool
2118	      - LHS
2119	        - _
2120	      - RHS
2121	        - freeBoard
2122	        - board
2123	    - ASSIGNMENT
2124	      - LHS
2125	        - _
2126	      - RHS
2127	        - freePointers
2128	        - pointers
2129	    - FREE
2130	      - front
2131	    - FREE
2132	      - stateTree
2133	    - RETURN
2134	      - true
2135	  - bool freePointers(pair(pair,pair) pointers)
2136	    - DECLARE
2137	      - TYPE
2138	        - pair(pair,pair)
2139	      - LHS
2140	        - front
2141	      - RHS
2142	        - FST
2143	          - pointers
2144	    - DECLARE
2145	      - TYPE
2146	        - pair(pair,pair)
2147	      - LHS
2148	        - row1
2149	      - RHS
2150	        - FST
2151	          - front
2152	    - DECLARE
2153	      - TYPE
2154	        - pair(pair,pair)
2155	      - LHS
2156	        - row2
2157	      - RHS
2158	        - SND
2159	          - front
2160	    - DECLARE
2161	      - TYPE
2162	        - pair(pair,pair)
2163	      - LHS
2164	        - row3
2165	      - RHS
2166	        - SND
2167	          - pointers
2168	    - DECLARE
2169	      - TYPE
2170	        - bool
2171	      - LHS
2172	        - _
2173	      - RHS
2174	        - freePointersRow
2175	        - row1
2176	    - ASSIGNMENT
2177	      - LHS
2178	        - _
2179	      - RHS
2180	        - freePointersRow
2181	        - row2
2182	    - ASSIGNMENT
2183	      - LHS
2184	        - _
2185	      - RHS
2186	        - freePointersRow
2187	        - row3
2188	    - FREE
2189	      - front
2190	    - FREE
2191	      - pointers
2192	    - RETURN
2193	      - true
2194	  - bool freePointersRow(pair(pair,pair) rowPointers)
2195	    - DECLARE
2196	      - TYPE
2197	        - pair(pair,pair)
2198	      - LHS
2199	        - front
2200	      - RHS
2201	        - FST
2202	          - rowPointers
2203	    - FREE
2204	      - front
2205	    - FREE
2206	      - rowPointers
2207	    - RETURN
2208	      - true
2209	  - bool deleteChildrenStateRecursively(pair(pair,pair) pointers)
2210	    - DECLARE
2211	      - TYPE
2212	        - pair(pair,pair)
2213	      - LHS
2214	        - front
2215	      - RHS
2216	        - FST
2217	          - pointers
2218	    - DECLARE
2219	      - TYPE
2220	        - pair(pair,pair)
2221	      - LHS
2222	        - row1
2223	      - RHS
2224	        - FST
2225	          - front
2226	    - DECLARE
2227	      - TYPE
2228	        - pair(pair,pair)
2229	      - LHS
2230	        - row2
2231	      - RHS
2232	        - SND
2233	          - front
2234	    - DECLARE
2235	      - TYPE
2236	        - pair(pair,pair)
2237	      - LHS
2238	        - row3
2239	      - RHS
2240	        - SND
2241	          - pointers
2242	    - DECLARE
2243	      - TYPE
2244	        - bool
2245	      - LHS
2246	        - _
2247	      - RHS
2248	        - deleteChildrenStateRecursivelyRow
2249	        - row1
2250	    - ASSIGNMENT
2251	      - LHS
2252	        - _
2253	      - RHS
2254	        - deleteChildrenStateRecursivelyRow
2255	        - row2
2256	    - ASSIGNMENT
2257	      - LHS
2258	        - _
2259	      - RHS
2260	        - deleteChildrenStateRecursivelyRow
2261	        - row3
2262	    - RETURN
2263	      - true
2264	  - bool deleteChildrenStateRecursivelyRow(pair(pair,pair) rowPointers)
2265	    - DECLARE
2266	      - TYPE
2267	        - pair(pair,pair)
2268	      - LHS
2269	        - front
2270	      - RHS
2271	        - FST
2272	          - rowPointers
2273	    - DECLARE
2274	      - TYPE
2275	        - pair(pair,int)
2276	      - LHS
2277	        - cell1
2278	      - RHS
2279	        - FST
2280	          - front
2281	    - DECLARE
2282	      - TYPE
2283	        - pair(pair,int)
2284	      - LHS
2285	        - cell2
2286	      - RHS
2287	        - SND
2288	          - front
2289	    - DECLARE
2290	      - TYPE
2291	        - pair(pair,int)
2292	      - LHS
2293	        - cell3
2294	      - RHS
2295	        - SND
2296	          - rowPointers
2297	    - DECLARE
2298	      - TYPE
2299	        - bool
2300	      - LHS
2301	        - _
2302	      - RHS
2303	        - deleteStateTreeRecursively
2304	        - cell1
2305	    - ASSIGNMENT
2306	      - LHS
2307	        - _
2308	      - RHS
2309	        - deleteStateTreeRecursively
2310	        - cell2
2311	    - ASSIGNMENT
2312	      - LHS
2313	        - _
2314	      - RHS
2315	        - deleteStateTreeRecursively
2316	        - cell3
2317	    - RETURN
2318	      - true
2319	  - bool askForAMove(pair(pair,pair) board, char currentTurn, char playerSymbol, pair(pair,pair) aiData, int[] move)
2320	    - IF
2321	      - CONDITION
2322	        - ==
2323	          - currentTurn
2324	          - playerSymbol
2325	      - THEN
2326	        - DECLARE
2327	          - TYPE
2328	            - bool
2329	          - LHS
2330	            - _
2331	          - RHS
2332	            - askForAMoveHuman
2333	            - board
2334	            - move
2335	      - ELSE
2336	        - DECLARE
2337	          - TYPE
2338	            - bool
2339	          - LHS
2340	            - _
2341	          - RHS
2342	            - askForAMoveAI
2343	            - board
2344	            - currentTurn
2345	            - playerSymbol
2346	            - aiData
2347	            - move
2348	    - RETURN
2349	      - true
2350	  - bool placeMove(pair(pair,pair) board, char currentTurn, int moveRow, int moveColumn)
2351	    - DECLARE
2352	      - TYPE
2353	        - pair(pair,char)
2354	      - LHS
2355	        - targetRow
2356	      - RHS
2357	        - null
2358	    - IF
2359	      - CONDITION
2360	        - <=
2361	          - moveRow
2362	          - 2
2363	      - THEN
2364	        - DECLARE
2365	          - TYPE
2366	            - pair(pair,pair)
2367	          - LHS
2368	            - front
2369	          - RHS
2370	            - FST
2371	              - board
2372	        - IF
2373	          - CONDITION
2374	            - ==
2375	              - moveRow
2376	              - 1
2377	          - THEN
2378	            - ASSIGNMENT
2379	              - LHS
2380	                - targetRow
2381	              - RHS
2382	                - FST
2383	                  - front
2384	          - ELSE
2385	            - ASSIGNMENT
2386	              - LHS
2387	                - targetRow
2388	              - RHS
2389	                - SND
2390	                  - front
2391	      - ELSE
2392	        - ASSIGNMENT
2393	          - LHS
2394	            - targetRow
2395	          - RHS
2396	            - SND
2397	              - board
2398	    - IF
2399	      - CONDITION
2400	        - <=
2401	          - moveColumn
2402	          - 2
2403	      - THEN
2404	        - DECLARE
2405	          - TYPE
2406	            - pair(char,char)
2407	          - LHS
2408	            - front
2409	          - RHS
2410	            - FST
2411	              - targetRow
2412	        - IF
2413	          - CONDITION
2414	            - ==
2415	              - moveColumn
2416	              - 1
2417	          - THEN
2418	            - ASSIGNMENT
2419	              - LHS
2420	                - FST
2421	                  - front
2422	              - RHS
2423	                - currentTurn
2424	          - ELSE
2425	            - ASSIGNMENT
2426	              - LHS
2427	                - SND
2428	                  - front
2429	              - RHS
2430	                - currentTurn
2431	      - ELSE
2432	        - ASSIGNMENT
2433	          - LHS
2434	            - SND
2435	              - targetRow
2436	          - RHS
2437	            - currentTurn
2438	    - RETURN
2439	      - true
2440	  - bool notifyMove(pair(pair,pair) board, char currentTurn, char playerSymbol, pair(pair,pair) aiData, int moveRow, int moveColumn)
2441	    - IF
2442	      - CONDITION
2443	        - ==
2444	          - currentTurn
2445	          - playerSymbol
2446	      - THEN
2447	        - DECLARE
2448	          - TYPE
2449	            - bool
2450	          - LHS
2451	            - _
2452	          - RHS
2453	            - notifyMoveAI
2454	            - board
2455	            - currentTurn
2456	            - playerSymbol
2457	            - aiData
2458	            - moveRow
2459	            - moveColumn
2460	      - ELSE
2461	        - DECLARE
2462	          - TYPE
2463	            - bool
2464	          - LHS
2465	            - _
2466	          - RHS
2467	            - notifyMoveHuman
2468	            - board
2469	            - currentTurn
2470	            - playerSymbol
2471	            - moveRow
2472	            - moveColumn
2473	    - RETURN
2474	      - true
2475	  - char oppositeSymbol(char symbol)
2476	    - IF
2477	      - CONDITION
2478	        - ==
2479	          - symbol
2480	          - 'x'
2481	      - THEN
2482	        - RETURN
2483	          - 'o'
2484	      - ELSE
2485	        - IF
2486	          - CONDITION
2487	            - ==
2488	              - symbol
2489	              - 'o'
2490	          - THEN
2491	            - RETURN
2492	              - 'x'
2493	          - ELSE
2494	            - PRINTLN
2495	              - "Internal Error: symbol given is neither \'x\' or \'o\'"
2496	            - EXIT
2497	              - -1
2498	  - char symbolAt(pair(pair,pair) board, int row, int column)
2499	    - DECLARE
2500	      - TYPE
2501	        - pair(pair,char)
2502	      - LHS
2503	        - targetRow
2504	      - RHS
2505	        - null
2506	    - IF
2507	      - CONDITION
2508	        - <=
2509	          - row
2510	          - 2
2511	      - THEN
2512	        - DECLARE
2513	          - TYPE
2514	            - pair(pair,pair)
2515	          - LHS
2516	            - front
2517	          - RHS
2518	            - FST
2519	              - board
2520	        - IF
2521	          - CONDITION
2522	            - ==
2523	              - row
2524	              - 1
2525	          - THEN
2526	            - ASSIGNMENT
2527	              - LHS
2528	                - targetRow
2529	              - RHS
2530	                - FST
2531	                  - front
2532	          - ELSE
2533	            - ASSIGNMENT
2534	              - LHS
2535	                - targetRow
2536	              - RHS
2537	                - SND
2538	                  - front
2539	      - ELSE
2540	        - ASSIGNMENT
2541	          - LHS
2542	            - targetRow
2543	          - RHS
2544	            - SND
2545	              - board
2546	    - DECLARE
2547	      - TYPE
2548	        - char
2549	      - LHS
2550	        - targetCell
2551	      - RHS
2552	        - '\0'
2553	    - IF
2554	      - CONDITION
2555	        - <=
2556	          - column
2557	          - 2
2558	      - THEN
2559	        - DECLARE
2560	          - TYPE
2561	            - pair(char,char)
2562	          - LHS
2563	            - front
2564	          - RHS
2565	            - FST
2566	              - targetRow
2567	        - IF
2568	          - CONDITION
2569	            - ==
2570	              - column
2571	              - 1
2572	          - THEN
2573	            - ASSIGNMENT
2574	              - LHS
2575	                - targetCell
2576	              - RHS
2577	                - FST
2578	                  - front
2579	          - ELSE
2580	            - ASSIGNMENT
2581	              - LHS
2582	                - targetCell
2583	              - RHS
2584	                - SND
2585	                  - front
2586	      - ELSE
2587	        - ASSIGNMENT
2588	          - LHS
2589	            - targetCell
2590	          - RHS
2591	            - SND
2592	              - targetRow
2593	    - RETURN
2594	      - targetCell
2595	  - bool containEmptyCell(pair(pair,pair) board)
2596	    - DECLARE
2597	      - TYPE
2598	        - pair(pair,pair)
2599	      - LHS
2600	        - front
2601	      - RHS
2602	        - FST
2603	          - board
2604	    - DECLARE
2605	      - TYPE
2606	        - pair(pair,char)
2607	      - LHS
2608	        - row1
2609	      - RHS
2610	        - FST
2611	          - front
2612	    - DECLARE
2613	      - TYPE
2614	        - pair(pair,char)
2615	      - LHS
2616	        - row2
2617	      - RHS
2618	        - SND
2619	          - front
2620	    - DECLARE
2621	      - TYPE
2622	        - pair(pair,char)
2623	      - LHS
2624	        - row3
2625	      - RHS
2626	        - SND
2627	          - board
2628	    - DECLARE
2629	      - TYPE
2630	        - bool
2631	      - LHS
2632	        - row1ContainEmpty
2633	      - RHS
2634	        - containEmptyCellRow
2635	        - row1
2636	    - DECLARE
2637	      - TYPE
2638	        - bool
2639	      - LHS
2640	        - row2ContainEmpty
2641	      - RHS
2642	        - containEmptyCellRow
2643	        - row2
2644	    - DECLARE
2645	      - TYPE
2646	        - bool
2647	      - LHS
2648	        - row3ContainEmpty
2649	      - RHS
2650	        - containEmptyCellRow
2651	        - row3
2652	    - RETURN
2653	      - ||
2654	        - ||
2655	          - row1ContainEmpty
2656	          - row2ContainEmpty
2657	        - row3ContainEmpty
2658	  - bool containEmptyCellRow(pair(pair,char) row)
2659	    - DECLARE
2660	      - TYPE
2661	        - pair(char,char)
2662	      - LHS
2663	        - front
2664	      - RHS
2665	        - FST
2666	          - row
2667	    - DECLARE
2668	      - TYPE
2669	        - char
2670	      - LHS
2671	        - cell1
2672	      - RHS
2673	        - FST
2674	          - front
2675	    - DECLARE
2676	      - TYPE
2677	        - char
2678	      - LHS
2679	        - cell2
2680	      - RHS
2681	        - SND
2682	          - front
2683	    - DECLARE
2684	      - TYPE
2685	        - char
2686	      - LHS
2687	        - cell3
2688	      - RHS
2689	        - SND
2690	          - row
2691	    - RETURN
2692	      - ||
2693	        - ||
2694	          - ==
2695	            - cell1
2696	            - '\0'
2697	          - ==
2698	            - cell2
2699	            - '\0'
2700	        - ==
2701	          - cell3
2702	          - '\0'
2703	  - bool hasWon(pair(pair,pair) board, char candidate)
2704	    - DECLARE
2705	      - TYPE
2706	        - char
2707	      - LHS
2708	        - c11
2709	      - RHS
2710	        - symbolAt
2711	        - board
2712	        - 1
2713	        - 1
2714	    - DECLARE
2715	      - TYPE
2716	        - char
2717	      - LHS
2718	        - c12
2719	      - RHS
2720	        - symbolAt
2721	        - board
2722	        - 1
2723	        - 2
2724	    - DECLARE
2725	      - TYPE
2726	        - char
2727	      - LHS
2728	        - c13
2729	      - RHS
2730	        - symbolAt
2731	        - board
2732	        - 1
2733	        - 3
2734	    - DECLARE
2735	      - TYPE
2736	        - char
2737	      - LHS
2738	        - c21
2739	      - RHS
2740	        - symbolAt
2741	        - board
2742	        - 2
2743	        - 1
2744	    - DECLARE
2745	      - TYPE
2746	        - char
2747	      - LHS
2748	        - c22
2749	      - RHS
2750	        - symbolAt
2751	        - board
2752	        - 2
2753	        - 2
2754	    - DECLARE
2755	      - TYPE
2756	        - char
2757	      - LHS
2758	        - c23
2759	      - RHS
2760	        - symbolAt
2761	        - board
2762	        - 2
2763	        - 3
2764	    - DECLARE
2765	      - TYPE
2766	        - char
2767	      - LHS
2768	        - c31
2769	      - RHS
2770	        - symbolAt
2771	        - board
2772	        - 3
2773	        - 1
2774	    - DECLARE
2775	      - TYPE
2776	        - char
2777	      - LHS
2778	        - c32
2779	      - RHS
2780	        - symbolAt
2781	        - board
2782	        - 3
2783	        - 2
2784	    - DECLARE
2785	      - TYPE
2786	        - char
2787	      - LHS
2788	        - c33
2789	      - RHS
2790	        - symbolAt
2791	        - board
2792	        - 3
2793	        - 3
2794	    - RETURN
2795	      - ||
2796	        - ||
2797	          - ||
2798	            - ||
2799	              - ||
2800	                - ||
2801	                  - ||
2802	                    - &&
2803	                      - &&
2804	                        - ==
2805	                          - c11
2806	                          - candidate
2807	                        - ==
2808	                          - c12
2809	                          - candidate
2810	                      - ==
2811	                        - c13
2812	                        - candidate
2813	                    - &&
2814	                      - &&
2815	                        - ==
2816	                          - c21
2817	                          - candidate
2818	                        - ==
2819	                          - c22
2820	                          - candidate
2821	                      - ==
2822	                        - c23
2823	                        - candidate
2824	                  - &&
2825	                    - &&
2826	                      - ==
2827	                        - c31
2828	                        - candidate
2829	                      - ==
2830	                        - c32
2831	                        - candidate
2832	                    - ==
2833	                      - c33
2834	                      - candidate
2835	                - &&
2836	                  - &&
2837	                    - ==
2838	                      - c11
2839	                      - candidate
2840	                    - ==
2841	                      - c21
2842	                      - candidate
2843	                  - ==
2844	                    - c31
2845	                    - candidate
2846	              - &&
2847	                - &&
2848	                  - ==
2849	                    - c12
2850	                    - candidate
2851	                  - ==
2852	                    - c22
2853	                    - candidate
2854	                - ==
2855	                  - c32
2856	                  - candidate
2857	            - &&
2858	              - &&
2859	                - ==
2860	                  - c13
2861	                  - candidate
2862	                - ==
2863	                  - c23
2864	                  - candidate
2865	              - ==
2866	                - c33
2867	                - candidate
2868	          - &&
2869	            - &&
2870	              - ==
2871	                - c11
2872	                - candidate
2873	              - ==
2874	                - c22
2875	                - candidate
2876	            - ==
2877	              - c33
2878	              - candidate
2879	        - &&
2880	          - &&
2881	            - ==
2882	              - c13
2883	              - candidate
2884	            - ==
2885	              - c22
2886	              - candidate
2887	          - ==
2888	            - c31
2889	            - candidate
2890	  - pair(pair,pair) allocateNewBoard()
2891	    - DECLARE
2892	      - TYPE
2893	        - pair(pair,char)
2894	      - LHS
2895	        - row1
2896	      - RHS
2897	        - allocateNewRow
2898	    - DECLARE
2899	      - TYPE
2900	        - pair(pair,char)
2901	      - LHS
2902	        - row2
2903	      - RHS
2904	        - allocateNewRow
2905	    - DECLARE
2906	      - TYPE
2907	        - pair(pair,char)
2908	      - LHS
2909	        - row3
2910	      - RHS
2911	        - allocateNewRow
2912	    - DECLARE
2913	      - TYPE
2914	        - pair(pair,pair)
2915	      - LHS
2916	        - front
2917	      - RHS
2918	        - NEW_PAIR
2919	          - FST
2920	            - row1
2921	          - SND
2922	            - row2
2923	    - DECLARE
2924	      - TYPE
2925	        - pair(pair,pair)
2926	      - LHS
2927	        - root
2928	      - RHS
2929	        - NEW_PAIR
2930	          - FST
2931	            - front
2932	          - SND
2933	            - row3
2934	    - RETURN
2935	      - root
2936	  - pair(pair,char) allocateNewRow()
2937	    - DECLARE
2938	      - TYPE
2939	        - pair(char,char)
2940	      - LHS
2941	        - front
2942	      - RHS
2943	        - NEW_PAIR
2944	          - FST
2945	            - '\0'
2946	          - SND
2947	            - '\0'
2948	    - DECLARE
2949	      - TYPE
2950	        - pair(pair,char)
2951	      - LHS
2952	        - root
2953	      - RHS
2954	        - NEW_PAIR
2955	          - FST
2956	            - front
2957	          - SND
2958	            - '\0'
2959	    - RETURN
2960	      - root
2961	  - bool freeBoard(pair(pair,pair) board)
2962	    - DECLARE
2963	      - TYPE
2964	        - pair(pair,pair)
2965	      - LHS
2966	        - front
2967	      - RHS
2968	        - FST
2969	          - board
2970	    - DECLARE
2971	      - TYPE
2972	        - pair(pair,char)
2973	      - LHS
2974	        - row1
2975	      - RHS
2976	        - FST
2977	          - front
2978	    - DECLARE
2979	      - TYPE
2980	        - pair(pair,char)
2981	      - LHS
2982	        - row2
2983	      - RHS
2984	        - SND
2985	          - front
2986	    - DECLARE
2987	      - TYPE
2988	        - pair(pair,char)
2989	      - LHS
2990	        - row3
2991	      - RHS
2992	        - SND
2993	          - board
2994	    - DECLARE
2995	      - TYPE
2996	        - bool
2997	      - LHS
2998	        - _
2999	      - RHS
3000	        - freeRow
3001	        - row1
3002	    - ASSIGNMENT
3003	      - LHS
3004	        - _
3005	      - RHS
3006	        - freeRow
3007	        - row2
3008	    - ASSIGNMENT
3009	      - LHS
3010	        - _
3011	      - RHS
3012	        - freeRow
3013	        - row3
3014	    - FREE
3015	      - front
3016	    - FREE
3017	      - board
3018	    - RETURN
3019	      - true
3020	  - bool freeRow(pair(pair,char) row)
3021	    - DECLARE
3022	      - TYPE
3023	        - pair(char,char)
3024	      - LHS
3025	        - front
3026	      - RHS
3027	        - FST
3028	          - row
3029	    - FREE
3030	      - front
3031	    - FREE
3032	      - row
3033	    - RETURN
3034	      - true
3035	  - bool printAiData(pair(pair,pair) aiData)
3036	    - DECLARE
3037	      - TYPE
3038	        - pair(char,pair)
3039	      - LHS
3040	        - info
3041	      - RHS
3042	        - FST
3043	          - aiData
3044	    - DECLARE
3045	      - TYPE
3046	        - pair(pair,int)
3047	      - LHS
3048	        - stateTree
3049	      - RHS
3050	        - SND
3051	          - aiData
3052	    - DECLARE
3053	      - TYPE
3054	        - bool
3055	      - LHS
3056	        - _
3057	      - RHS
3058	        - printStateTreeRecursively
3059	        - stateTree
3060	    - EXIT
3061	      - 0
3062	  - bool printStateTreeRecursively(pair(pair,int) stateTree)
3063	    - IF
3064	      - CONDITION
3065	        - ==
3066	          - stateTree
3067	          - null
3068	      - THEN
3069	        - RETURN
3070	          - true
3071	      - ELSE
3072	        - DECLARE
3073	          - TYPE
3074	            - pair(pair,pair)
3075	          - LHS
3076	            - front
3077	          - RHS
3078	            - FST
3079	              - stateTree
3080	        - DECLARE
3081	          - TYPE
3082	            - pair(pair,pair)
3083	          - LHS
3084	            - board
3085	          - RHS
3086	            - FST
3087	              - front
3088	        - DECLARE
3089	          - TYPE
3090	            - pair(pair,pair)
3091	          - LHS
3092	            - pointers
3093	          - RHS
3094	            - SND
3095	              - front
3096	        - DECLARE
3097	          - TYPE
3098	            - int
3099	          - LHS
3100	            - value
3101	          - RHS
3102	            - SND
3103	              - stateTree
3104	        - PRINT
3105	          - 'v'
3106	        - PRINT
3107	          - '='
3108	        - PRINTLN
3109	          - value
3110	        - DECLARE
3111	          - TYPE
3112	            - bool
3113	          - LHS
3114	            - _
3115	          - RHS
3116	            - printBoard
3117	            - board
3118	        - ASSIGNMENT
3119	          - LHS
3120	            - _
3121	          - RHS
3122	            - printChildrenStateTree
3123	            - pointers
3124	        - PRINTLN
3125	          - 'p'
3126	        - RETURN
3127	          - true
3128	  - bool printChildrenStateTree(pair(pair,pair) pointers)
3129	    - DECLARE
3130	      - TYPE
3131	        - pair(pair,pair)
3132	      - LHS
3133	        - front
3134	      - RHS
3135	        - FST
3136	          - pointers
3137	    - DECLARE
3138	      - TYPE
3139	        - pair(pair,pair)
3140	      - LHS
3141	        - row1
3142	      - RHS
3143	        - FST
3144	          - front
3145	    - DECLARE
3146	      - TYPE
3147	        - pair(pair,pair)
3148	      - LHS
3149	        - row2
3150	      - RHS
3151	        - SND
3152	          - front
3153	    - DECLARE
3154	      - TYPE
3155	        - pair(pair,pair)
3156	      - LHS
3157	        - row3
3158	      - RHS
3159	        - SND
3160	          - pointers
3161	    - DECLARE
3162	      - TYPE
3163	        - bool
3164	      - LHS
3165	        - _
3166	      - RHS
3167	        - printChildrenStateTreeRow
3168	        - row1
3169	    - ASSIGNMENT
3170	      - LHS
3171	        - _
3172	      - RHS
3173	        - printChildrenStateTreeRow
3174	        - row2
3175	    - ASSIGNMENT
3176	      - LHS
3177	        - _
3178	      - RHS
3179	        - printChildrenStateTreeRow
3180	        - row3
3181	    - RETURN
3182	      - true
3183	  - bool printChildrenStateTreeRow(pair(pair,pair) rowPointers)
3184	    - DECLARE
3185	      - TYPE
3186	        - pair(pair,pair)
3187	      - LHS
3188	        - front
3189	      - RHS
3190	        - FST
3191	          - rowPointers
3192	    - DECLARE
3193	      - TYPE
3194	        - pair(pair,int)
3195	      - LHS
3196	        - cell1
3197	      - RHS
3198	        - FST
3199	          - front
3200	    - DECLARE
3201	      - TYPE
3202	        - pair(pair,int)
3203	      - LHS
3204	        - cell2
3205	      - RHS
3206	        - SND
3207	          - front
3208	    - DECLARE
3209	      - TYPE
3210	        - pair(pair,int)
3211	      - LHS
3212	        - cell3
3213	      - RHS
3214	        - SND
3215	          - rowPointers
3216	    - DECLARE
3217	      - TYPE
3218	        - bool
3219	      - LHS
3220	        - _
3221	      - RHS
3222	        - printStateTreeRecursively
3223	        - cell1
3224	    - ASSIGNMENT
3225	      - LHS
3226	        - _
3227	      - RHS
3228	        - printStateTreeRecursively
3229	        - cell2
3230	    - ASSIGNMENT
3231	      - LHS
3232	        - _
3233	      - RHS
3234	        - printStateTreeRecursively
3235	        - cell3
3236	    - RETURN
3237	      - true
3238	  - int main()
3239	    - DECLARE
3240	      - TYPE
3241	        - char
3242	      - LHS
3243	        - playerSymbol
3244	      - RHS
3245	        - chooseSymbol
3246	    - DECLARE
3247	      - TYPE
3248	        - char
3249	      - LHS
3250	        - aiSymbol
3251	      - RHS
3252	        - oppositeSymbol
3253	        - playerSymbol
3254	    - DECLARE
3255	      - TYPE
3256	        - char
3257	      - LHS
3258	        - currentTurn
3259	      - RHS
3260	        - 'x'
3261	    - DECLARE
3262	      - TYPE
3263	        - pair(pair,pair)
3264	      - LHS
3265	        - board
3266	      - RHS
3267	        - allocateNewBoard
3268	    - PRINTLN
3269	      - "Initialising AI. Please wait, this may take a few minutes."
3270	    - DECLARE
3271	      - TYPE
3272	        - pair(pair,pair)
3273	      - LHS
3274	        - aiData
3275	      - RHS
3276	        - initAI
3277	        - aiSymbol
3278	    - DECLARE
3279	      - TYPE
3280	        - int
3281	      - LHS
3282	        - turnCount
3283	      - RHS
3284	        - 0
3285	    - DECLARE
3286	      - TYPE
3287	        - char
3288	      - LHS
3289	        - winner
3290	      - RHS
3291	        - '\0'
3292	    - DECLARE
3293	      - TYPE
3294	        - bool
3295	      - LHS
3296	        - _
3297	      - RHS
3298	        - printBoard
3299	        - board
3300	    - LOOP
3301	      - CONDITION
3302	        - &&
3303	          - ==
3304	            - winner
3305	            - '\0'
3306	          - <
3307	            - turnCount
3308	            - 9
3309	      - DO
3310	        - DECLARE
3311	          - TYPE
3312	            - int[]
3313	          - LHS
3314	            - move
3315	          - RHS
3316	            - ARRAY LITERAL
3317	              - 0
3318	              - 0
3319	        - ASSIGNMENT
3320	          - LHS
3321	            - _
3322	          - RHS
3323	            - askForAMove
3324	            - board
3325	            - currentTurn
3326	            - playerSymbol
3327	            - aiData
3328	            - move
3329	        - ASSIGNMENT
3330	          - LHS
3331	            - _
3332	          - RHS
3333	            - placeMove
3334	            - board
3335	            - currentTurn
3336	            - move
3337	              - []
3338	                - 0
3339	            - move
3340	              - []
3341	                - 1
3342	        - ASSIGNMENT
3343	          - LHS
3344	            - _
3345	          - RHS
3346	            - notifyMove
3347	            - board
3348	            - currentTurn
3349	            - playerSymbol
3350	            - aiData
3351	            - move
3352	              - []
3353	                - 0
3354	            - move
3355	              - []
3356	                - 1
3357	        - ASSIGNMENT
3358	          - LHS
3359	            - _
3360	          - RHS
3361	            - printBoard
3362	            - board
3363	        - DECLARE
3364	          - TYPE
3365	            - bool
3366	          - LHS
3367	            - won
3368	          - RHS
3369	            - hasWon
3370	            - board
3371	            - currentTurn
3372	        - IF
3373	          - CONDITION
3374	            - won
3375	          - THEN
3376	            - ASSIGNMENT
3377	              - LHS
3378	                - winner
3379	              - RHS
3380	                - currentTurn
3381	          - ELSE
3382	            - SKIP
3383	        - ASSIGNMENT
3384	          - LHS
3385	            - currentTurn
3386	          - RHS
3387	            - oppositeSymbol
3388	            - currentTurn
3389	        - ASSIGNMENT
3390	          - LHS
3391	            - turnCount
3392	          - RHS
3393	            - +
3394	              - turnCount
3395	              - 1
3396	    - ASSIGNMENT
3397	      - LHS
3398	        - _
3399	      - RHS
3400	        - freeBoard
3401	        - board
3402	    - ASSIGNMENT
3403	      - LHS
3404	        - _
3405	      - RHS
3406	        - destroyAI
3407	        - aiData
3408	    - IF
3409	      - CONDITION
3410	        - !=
3411	          - winner
3412	          - '\0'
3413	      - THEN
3414	        - PRINT
3415	          - winner
3416	        - PRINTLN
3417	          - " has won!"
3418	      - ELSE
3419	        - PRINTLN
3420	          - "Stalemate!"
===========================================================
-- Finished
