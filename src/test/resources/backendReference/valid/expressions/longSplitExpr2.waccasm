# tests whether the compiler can handle long expressions with several variables

# Output:
# 362880
# 128

# Exit:
# 128

begin

  int x = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 ;
  int y = -1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - 11 - 12 - 13 - 14 - 15 - 16 - 17 ;
  int z = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 ;
  int div = 10 ;
  println x + y + ( z / div ) ;
  println (x + y + ( z / div )) % 256 ;
  exit x + y + ( z / div )

end

-- Warning: input file extension is '' and not '.wacc'. Check you are targeting a WACC program.
-- Compiling...
-- Printing Assembly...
test.s contents are:
===========================================================
0	.data
1	
2	msg_0:
3		.word 82
4		.ascii	"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\n"
5	msg_1:
6		.word 45
7		.ascii	"DivideByZeroError: divide or modulo by zero\n\0"
8	msg_2:
9		.word 3
10		.ascii	"%d\0"
11	msg_3:
12		.word 1
13		.ascii	"\0"
14	msg_4:
15		.word 5
16		.ascii	"%.*s\0"
17	
18	.text
19	
20	.global main
21	main:
22		PUSH {lr}
23		SUB sp, sp, #16
24		LDR r4, =1
25		LDR r5, =2
26		ADDS r4, r4, r5
27		BLVS p_throw_overflow_error
28		LDR r5, =3
29		ADDS r4, r4, r5
30		BLVS p_throw_overflow_error
31		LDR r5, =4
32		ADDS r4, r4, r5
33		BLVS p_throw_overflow_error
34		LDR r5, =5
35		ADDS r4, r4, r5
36		BLVS p_throw_overflow_error
37		LDR r5, =6
38		ADDS r4, r4, r5
39		BLVS p_throw_overflow_error
40		LDR r5, =7
41		ADDS r4, r4, r5
42		BLVS p_throw_overflow_error
43		LDR r5, =8
44		ADDS r4, r4, r5
45		BLVS p_throw_overflow_error
46		LDR r5, =9
47		ADDS r4, r4, r5
48		BLVS p_throw_overflow_error
49		LDR r5, =10
50		ADDS r4, r4, r5
51		BLVS p_throw_overflow_error
52		LDR r5, =11
53		ADDS r4, r4, r5
54		BLVS p_throw_overflow_error
55		LDR r5, =12
56		ADDS r4, r4, r5
57		BLVS p_throw_overflow_error
58		LDR r5, =13
59		ADDS r4, r4, r5
60		BLVS p_throw_overflow_error
61		LDR r5, =14
62		ADDS r4, r4, r5
63		BLVS p_throw_overflow_error
64		LDR r5, =15
65		ADDS r4, r4, r5
66		BLVS p_throw_overflow_error
67		LDR r5, =16
68		ADDS r4, r4, r5
69		BLVS p_throw_overflow_error
70		LDR r5, =17
71		ADDS r4, r4, r5
72		BLVS p_throw_overflow_error
73		STR r4, [sp, #12]
74		LDR r4, =-1
75		LDR r5, =2
76		SUBS r4, r4, r5
77		BLVS p_throw_overflow_error
78		LDR r5, =3
79		SUBS r4, r4, r5
80		BLVS p_throw_overflow_error
81		LDR r5, =4
82		SUBS r4, r4, r5
83		BLVS p_throw_overflow_error
84		LDR r5, =5
85		SUBS r4, r4, r5
86		BLVS p_throw_overflow_error
87		LDR r5, =6
88		SUBS r4, r4, r5
89		BLVS p_throw_overflow_error
90		LDR r5, =7
91		SUBS r4, r4, r5
92		BLVS p_throw_overflow_error
93		LDR r5, =8
94		SUBS r4, r4, r5
95		BLVS p_throw_overflow_error
96		LDR r5, =9
97		SUBS r4, r4, r5
98		BLVS p_throw_overflow_error
99		LDR r5, =10
100		SUBS r4, r4, r5
101		BLVS p_throw_overflow_error
102		LDR r5, =11
103		SUBS r4, r4, r5
104		BLVS p_throw_overflow_error
105		LDR r5, =12
106		SUBS r4, r4, r5
107		BLVS p_throw_overflow_error
108		LDR r5, =13
109		SUBS r4, r4, r5
110		BLVS p_throw_overflow_error
111		LDR r5, =14
112		SUBS r4, r4, r5
113		BLVS p_throw_overflow_error
114		LDR r5, =15
115		SUBS r4, r4, r5
116		BLVS p_throw_overflow_error
117		LDR r5, =16
118		SUBS r4, r4, r5
119		BLVS p_throw_overflow_error
120		LDR r5, =17
121		SUBS r4, r4, r5
122		BLVS p_throw_overflow_error
123		STR r4, [sp, #8]
124		LDR r4, =1
125		LDR r5, =2
126		SMULL r4, r5, r4, r5
127		CMP r5, r4, ASR #31
128		BLNE p_throw_overflow_error
129		LDR r5, =3
130		SMULL r4, r5, r4, r5
131		CMP r5, r4, ASR #31
132		BLNE p_throw_overflow_error
133		LDR r5, =4
134		SMULL r4, r5, r4, r5
135		CMP r5, r4, ASR #31
136		BLNE p_throw_overflow_error
137		LDR r5, =5
138		SMULL r4, r5, r4, r5
139		CMP r5, r4, ASR #31
140		BLNE p_throw_overflow_error
141		LDR r5, =6
142		SMULL r4, r5, r4, r5
143		CMP r5, r4, ASR #31
144		BLNE p_throw_overflow_error
145		LDR r5, =7
146		SMULL r4, r5, r4, r5
147		CMP r5, r4, ASR #31
148		BLNE p_throw_overflow_error
149		LDR r5, =8
150		SMULL r4, r5, r4, r5
151		CMP r5, r4, ASR #31
152		BLNE p_throw_overflow_error
153		LDR r5, =9
154		SMULL r4, r5, r4, r5
155		CMP r5, r4, ASR #31
156		BLNE p_throw_overflow_error
157		LDR r5, =10
158		SMULL r4, r5, r4, r5
159		CMP r5, r4, ASR #31
160		BLNE p_throw_overflow_error
161		STR r4, [sp, #4]
162		LDR r4, =10
163		STR r4, [sp]
164		LDR r4, [sp, #12]
165		LDR r5, [sp, #8]
166		ADDS r4, r4, r5
167		BLVS p_throw_overflow_error
168		LDR r5, [sp, #4]
169		LDR r6, [sp]
170		MOV r0, r5
171		MOV r1, r6
172		BL p_check_divide_by_zero
173		BL __aeabi_idiv
174		MOV r5, r0
175		ADDS r4, r4, r5
176		BLVS p_throw_overflow_error
177		MOV r0, r4
178		BL p_print_int
179		BL p_print_ln
180		LDR r4, [sp, #12]
181		LDR r5, [sp, #8]
182		ADDS r4, r4, r5
183		BLVS p_throw_overflow_error
184		LDR r5, [sp, #4]
185		LDR r6, [sp]
186		MOV r0, r5
187		MOV r1, r6
188		BL p_check_divide_by_zero
189		BL __aeabi_idiv
190		MOV r5, r0
191		ADDS r4, r4, r5
192		BLVS p_throw_overflow_error
193		LDR r5, =256
194		MOV r0, r4
195		MOV r1, r5
196		BL p_check_divide_by_zero
197		BL __aeabi_idivmod
198		MOV r4, r1
199		MOV r0, r4
200		BL p_print_int
201		BL p_print_ln
202		LDR r4, [sp, #12]
203		LDR r5, [sp, #8]
204		ADDS r4, r4, r5
205		BLVS p_throw_overflow_error
206		LDR r5, [sp, #4]
207		LDR r6, [sp]
208		MOV r0, r5
209		MOV r1, r6
210		BL p_check_divide_by_zero
211		BL __aeabi_idiv
212		MOV r5, r0
213		ADDS r4, r4, r5
214		BLVS p_throw_overflow_error
215		MOV r0, r4
216		BL exit
217		ADD sp, sp, #16
218		LDR r0, =0
219		POP {pc}
220		.ltorg
221	p_throw_overflow_error:
222		LDR r0, =msg_0
223		BL p_throw_runtime_error
224	p_check_divide_by_zero:
225		PUSH {lr}
226		CMP r1, #0
227		LDREQ r0, =msg_1
228		BLEQ p_throw_runtime_error
229		POP {pc}
230	p_print_int:
231		PUSH {lr}
232		MOV r1, r0
233		LDR r0, =msg_2
234		ADD r0, r0, #4
235		BL printf
236		MOV r0, #0
237		BL fflush
238		POP {pc}
239	p_print_ln:
240		PUSH {lr}
241		LDR r0, =msg_3
242		ADD r0, r0, #4
243		BL puts
244		MOV r0, #0
245		BL fflush
246		POP {pc}
247	p_throw_runtime_error:
248		BL p_print_string
249		MOV r0, #-1
250		BL exit
251	p_print_string:
252		PUSH {lr}
253		LDR r1, [r0]
254		ADD r2, r0, #4
255		LDR r0, =msg_4
256		ADD r0, r0, #4
257		BL printf
258		MOV r0, #0
259		BL fflush
260		POP {pc}
261	
===========================================================
-- Assembling and Linking...
-- Executing...
===========================================================
362880
128
===========================================================
The exit code is 128.
-- Finished
