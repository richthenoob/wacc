# iteratively calculate the given fibonacci number

# Output:
# This program calculates the nth fibonacci number iteratively.
# Please enter n (should not be too large): #input#
# The input n is #output#
# The nth fibonacci number is #output#

# Program:

begin
  println "This program calculates the nth fibonacci number iteratively." ;
  print "Please enter n (should not be too large): " ;
  int n = 0;
  read n ;
  print "The input n is " ;
  println n ;
  print "The nth fibonacci number is " ;
  int f0 = 0 ;
  int f1 = 1 ;
  int save = 0;
  while n > 0 do
    save = f0 ;
    f0 = f1 ;
    f1 = save + f1 ;
    n = n - 1
  done ;
  println f0
end

-- Compiling...
-- Printing Assembly...
fibonacciFullIt.s contents are:
===========================================================
0	.data
1	
2	msg_0:
3		.word 61
4		.ascii	"This program calculates the nth fibonacci number iteratively."
5	msg_1:
6		.word 42
7		.ascii	"Please enter n (should not be too large): "
8	msg_2:
9		.word 15
10		.ascii	"The input n is "
11	msg_3:
12		.word 28
13		.ascii	"The nth fibonacci number is "
14	msg_4:
15		.word 5
16		.ascii	"%.*s\0"
17	msg_5:
18		.word 1
19		.ascii	"\0"
20	msg_6:
21		.word 3
22		.ascii	"%d\0"
23	msg_7:
24		.word 3
25		.ascii	"%d\0"
26	msg_8:
27		.word 82
28		.ascii	"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\n"
29	
30	.text
31	
32	.global main
33	main:
34		PUSH {lr}
35		SUB sp, sp, #16
36		LDR r4, =msg_0
37		MOV r0, r4
38		BL p_print_string
39		BL p_print_ln
40		LDR r4, =msg_1
41		MOV r0, r4
42		BL p_print_string
43		LDR r4, =0
44		STR r4, [sp, #12]
45		ADD r4, sp, #12
46		MOV r0, r4
47		BL p_read_int
48		LDR r4, =msg_2
49		MOV r0, r4
50		BL p_print_string
51		LDR r4, [sp, #12]
52		MOV r0, r4
53		BL p_print_int
54		BL p_print_ln
55		LDR r4, =msg_3
56		MOV r0, r4
57		BL p_print_string
58		LDR r4, =0
59		STR r4, [sp, #8]
60		LDR r4, =1
61		STR r4, [sp, #4]
62		LDR r4, =0
63		STR r4, [sp]
64		B L0
65	L1:
66		LDR r4, [sp, #8]
67		STR r4, [sp]
68		LDR r4, [sp, #4]
69		STR r4, [sp, #8]
70		LDR r4, [sp]
71		LDR r5, [sp, #4]
72		ADDS r4, r4, r5
73		BLVS p_throw_overflow_error
74		STR r4, [sp, #4]
75		LDR r4, [sp, #12]
76		LDR r5, =1
77		SUBS r4, r4, r5
78		BLVS p_throw_overflow_error
79		STR r4, [sp, #12]
80	L0:
81		LDR r4, [sp, #12]
82		LDR r5, =0
83		CMP r4, r5
84		MOVGT r4, #1
85		MOVLE r4, #0
86		CMP r4, #1
87		BEQ L1
88		LDR r4, [sp, #8]
89		MOV r0, r4
90		BL p_print_int
91		BL p_print_ln
92		ADD sp, sp, #16
93		LDR r0, =0
94		POP {pc}
95		.ltorg
96	p_print_string:
97		PUSH {lr}
98		LDR r1, [r0]
99		ADD r2, r0, #4
100		LDR r0, =msg_4
101		ADD r0, r0, #4
102		BL printf
103		MOV r0, #0
104		BL fflush
105		POP {pc}
106	p_print_ln:
107		PUSH {lr}
108		LDR r0, =msg_5
109		ADD r0, r0, #4
110		BL puts
111		MOV r0, #0
112		BL fflush
113		POP {pc}
114	p_read_int:
115		PUSH {lr}
116		MOV r1, r0
117		LDR r0, =msg_6
118		ADD r0, r0, #4
119		BL scanf
120		POP {pc}
121	p_print_int:
122		PUSH {lr}
123		MOV r1, r0
124		LDR r0, =msg_7
125		ADD r0, r0, #4
126		BL printf
127		MOV r0, #0
128		BL fflush
129		POP {pc}
130	p_throw_overflow_error:
131		LDR r0, =msg_8
132		BL p_throw_runtime_error
133	p_throw_runtime_error:
134		BL p_print_string
135		MOV r0, #-1
136		BL exit
137	
===========================================================
-- Assembling and Linking...
-- Executing...
===========================================================
This program calculates the nth fibonacci number iteratively.
Please enter n (should not be too large): The input n is 0
The nth fibonacci number is 0
===========================================================
The exit code is 0.
-- Finished
