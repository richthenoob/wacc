# recursively calculate the nth fibonacci number

# Output:
# This program calculates the nth fibonacci number recursively.
# Please enter n (should not be too large): #input#
# The input n is #output#
# The nth fibonacci number is #output#

# Program:

begin
  int fibonacci(int n) is
    if n <= 1
    then
      return n
    else
      skip
    fi ;
    int f1 = call fibonacci(n - 1) ;
    int f2 = call fibonacci(n - 2) ;
    return f1 + f2
  end

  println "This program calculates the nth fibonacci number recursively." ;
  print "Please enter n (should not be too large): " ;
  int n = 0;
  read n ;
  print "The input n is " ;
  println n ;
  print "The nth fibonacci number is " ;
  int result = call fibonacci(n) ;
  println  result
end

-- Compiling...
-- Printing Assembly...
fibonacciFullRec.s contents are:
===========================================================
0	.data
1	
2	msg_0:
3		.word 61
4		.ascii	"This program calculates the nth fibonacci number recursively."
5	msg_1:
6		.word 42
7		.ascii	"Please enter n (should not be too large): "
8	msg_2:
9		.word 15
10		.ascii	"The input n is "
11	msg_3:
12		.word 28
13		.ascii	"The nth fibonacci number is "
14	msg_4:
15		.word 82
16		.ascii	"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\n"
17	msg_5:
18		.word 5
19		.ascii	"%.*s\0"
20	msg_6:
21		.word 1
22		.ascii	"\0"
23	msg_7:
24		.word 3
25		.ascii	"%d\0"
26	msg_8:
27		.word 3
28		.ascii	"%d\0"
29	
30	.text
31	
32	.global main
33	f_fibonacci:
34		PUSH {lr}
35		SUB sp, sp, #8
36		LDR r4, [sp, #12]
37		LDR r5, =1
38		CMP r4, r5
39		MOVLE r4, #1
40		MOVGT r4, #0
41		CMP r4, #0
42		BEQ L0
43		LDR r4, [sp, #12]
44		MOV r0, r4
45		ADD sp, sp, #8
46		POP {pc}
47		B L1
48	L0:
49	L1:
50		LDR r4, [sp, #12]
51		LDR r5, =1
52		SUBS r4, r4, r5
53		BLVS p_throw_overflow_error
54		STR r4, [sp, #-4]!
55		BL f_fibonacci
56		ADD sp, sp, #4
57		MOV r4, r0
58		STR r4, [sp, #4]
59		LDR r4, [sp, #12]
60		LDR r5, =2
61		SUBS r4, r4, r5
62		BLVS p_throw_overflow_error
63		STR r4, [sp, #-4]!
64		BL f_fibonacci
65		ADD sp, sp, #4
66		MOV r4, r0
67		STR r4, [sp]
68		LDR r4, [sp, #4]
69		LDR r5, [sp]
70		ADDS r4, r4, r5
71		BLVS p_throw_overflow_error
72		MOV r0, r4
73		ADD sp, sp, #8
74		POP {pc}
75		POP {pc}
76		.ltorg
77	main:
78		PUSH {lr}
79		SUB sp, sp, #8
80		LDR r4, =msg_0
81		MOV r0, r4
82		BL p_print_string
83		BL p_print_ln
84		LDR r4, =msg_1
85		MOV r0, r4
86		BL p_print_string
87		LDR r4, =0
88		STR r4, [sp, #4]
89		ADD r4, sp, #4
90		MOV r0, r4
91		BL p_read_int
92		LDR r4, =msg_2
93		MOV r0, r4
94		BL p_print_string
95		LDR r4, [sp, #4]
96		MOV r0, r4
97		BL p_print_int
98		BL p_print_ln
99		LDR r4, =msg_3
100		MOV r0, r4
101		BL p_print_string
102		LDR r4, [sp, #4]
103		STR r4, [sp, #-4]!
104		BL f_fibonacci
105		ADD sp, sp, #4
106		MOV r4, r0
107		STR r4, [sp]
108		LDR r4, [sp]
109		MOV r0, r4
110		BL p_print_int
111		BL p_print_ln
112		ADD sp, sp, #8
113		LDR r0, =0
114		POP {pc}
115		.ltorg
116	p_throw_overflow_error:
117		LDR r0, =msg_4
118		BL p_throw_runtime_error
119	p_print_string:
120		PUSH {lr}
121		LDR r1, [r0]
122		ADD r2, r0, #4
123		LDR r0, =msg_5
124		ADD r0, r0, #4
125		BL printf
126		MOV r0, #0
127		BL fflush
128		POP {pc}
129	p_print_ln:
130		PUSH {lr}
131		LDR r0, =msg_6
132		ADD r0, r0, #4
133		BL puts
134		MOV r0, #0
135		BL fflush
136		POP {pc}
137	p_read_int:
138		PUSH {lr}
139		MOV r1, r0
140		LDR r0, =msg_7
141		ADD r0, r0, #4
142		BL scanf
143		POP {pc}
144	p_print_int:
145		PUSH {lr}
146		MOV r1, r0
147		LDR r0, =msg_8
148		ADD r0, r0, #4
149		BL printf
150		MOV r0, #0
151		BL fflush
152		POP {pc}
153	p_throw_runtime_error:
154		BL p_print_string
155		MOV r0, #-1
156		BL exit
157	
===========================================================
-- Assembling and Linking...
-- Executing...
===========================================================
This program calculates the nth fibonacci number recursively.
Please enter n (should not be too large): The input n is 30
The nth fibonacci number is 832040
===========================================================
The exit code is 0.
-- Finished
