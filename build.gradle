/* Set up dependencies */
plugins {
    id 'java'
    id 'antlr'
    id 'com.palantir.docker-run' version '0.25.0'
}

group 'com.waccgroup22'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.2'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.2"
    antlr "org.antlr:antlr4:4.9.1"
    testImplementation group: 'com.github.docker-java', name: 'docker-java', version: '3.2.7'
}

/* Compile */
jar {
    manifest {
        attributes 'Main-Class': 'ic.doc.WaccFrontend'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    println('The compiled jar can be found at ' + project.buildDir.toString() + "/" + project.libsDirName)
    println('Example wacc files can be found at ' + project.buildDir.toString() + "/resources/test/wacc_examples/")
}

generateGrammarSource {
    arguments += ["-visitor","-no-listener"]
    outputDirectory = file 'src/main/java/ic/doc/antlr/'
}

/* Tests */
apply from: 'tests.gradle'

/* Clean-up. Removes generated antlr files and the build directory. */
clean {
    delete "${rootDir}/src/main/java/ic/doc/antlr/"
}

task runExample(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "ic.doc.frontend.WaccFrontend"
    args "src/test/resources/quickTest/test.wacc"
}