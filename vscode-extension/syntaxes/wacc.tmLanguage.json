{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Wacc",
	"patterns": [
		{
			"include": "#operators"
    },
    {
      "include": "#classes"
    },
		{
			"include": "#imports"
		},
		{
			"include": "#types"
		},
		{
			"include": "#comments"
    },
		{
			"include": "#strings"
		},
		{
			"include": "#control-flow"
    },
		{
			"include": "#literals"
    },
    {
      "include": "#predefined-functions"
    },
    {
      "include": "#other-keywords"
    },
		{
			"include": "#variables"
    }
	],
	"repository": {
    "operators": {
      "patterns": [
        {
          "include": "#unary-operators"
        },
        {
          "include": "#binary-operators"
        }
      ]
    },
    "unary-operators": {
      "patterns": [
        {
          "name": "keyword.operator.wacc",
          "match": "\\b(!|len|ord|chr|-)\\b"
        }
      ]
    },
    "binary-operators": {
      "patterns": [
        {
          "name": "keyword.operator.wacc",
          "match": "(=|\\*|\\/|>|>=|<|<=|==|!=|&&|\\|\\||\\+|-)"
        }
      ]
    },
		"strings": {
			"name": "string.quoted.double.wacc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.wacc",
					"match": "\\\\."
				}
			]
		},
    "types": {
      "patterns": [
        {
          "include": "#array-type"
        },
        {
          "include": "#pair-type"
        },
        {
          "include": "#base-types"
        }
      ]
		},
    "base-types": {
      "patterns": [
        {
          "name": "storage.type.wacc",
          "match": "\\b(int|bool|char|string)\\b"
        }
      ]
    },
    "pair-type": {
      "patterns": [
        {
          "include": "#pair"
        },
        {
          "include": "#internal-pair-type"
        }
      ]
    },
    "pair": {
      "match": "\\b(pair)(\\s*)\\b",
      "captures": {
        "1": {
          "name": "storage.type.wacc"
        }
      }
    },
    "internal-pair-type": {
      "match": "(\\()(\\s*)(int|bool|char|string|pair)(,)(\\s*)(int|bool|char|string|pair)(\\s*)(\\))",
      "captures": {
        "3": {
          "name": "storage.type.wacc"
        },
        "6": {
          "name": "storage.type.wacc"
        }
      }
    },
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign.wacc",
					"match": "#.*"
				}
			]
		},
		"variables": {
      "patterns": [
        {
          "include": "#method-names"
        },
        {
          "include": "#normal-variables"
        }
      ]
		},
    "control-flow": {
      "patterns": [
        {
          "include": "#scope"
        },
        {
          "include": "#conditional"
        },
        {
          "include": "#while-loop"
        }
      ]
    },
    "normal-variables": {
      "patterns": [
        {
          "name": "variable.other.wacc",
          "match": "(\\b[_a-zA-Z]([_a-zA-Z0-9])*\\b)"
        }
      ]
    },
    "method-names": {
      "match": "([_a-zA-Z]([_a-zA-Z0-9])*)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.wacc"
        }
      }
    },
		"imports": {
			"patterns": [
				{
					"name": "keyword.other.wacc",
					"match": "\\b(include)\\b"
				}
			]
		},
    "scope": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "\\b(begin|is|end)\\b"
        }
      ]
    },
    "conditional": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "\\b(if|else|then|fi)\\b"
        }
      ]
    },
    "while-loop": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "\\b(while|do|done)\\b"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "include": "#pair-literal"
        },
        {
          "include": "#bool-literal"
        },
        {
          "include": "#char-literal"
        },
        {
          "include": "#int-literal"
        }
      ]
    },
    "pair-literal": {
      "patterns": [
        {
          "name": "constant.language.wacc",
          "match": "\\b(null)\\b"
        }
      ]
    },
    "bool-literal": {
      "patterns": [
        {
          "name": "constant.language.wacc",
          "match": "(true|false)"
        }
      ]
    },
    "int-literal": {
      "patterns": [
        {
          "name": "constant.numeric.wacc",
          "match": "((\\+|-)?\\d+)"
        }
      ]
    },
    "char-literal": {
      "name": "string.quoted.single.wacc",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.wacc",
					"match": "."
				}
			]
    },
    "predefined-functions": {
      "patterns": [
        {
          "name": "keyword.control.wacc",
          "match": "\\b(print|println|read|free|call|fst|snd|new)\\b"
        }
      ]
    },
    "other-keywords": {
      "patterns": [
        {
          "name": "keyword.other.wacc",
          "match": "\\b(skip|return|exit)\\b"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "include": "#class-instantiation"
        },
        {
          "include": "#class-declaration"
        }
      ]
    },
    "class-instantiation": {
      "match": "(new) ([_a-zA-Z]([_a-zA-Z0-9])*)\\s*\\(",
      "captures": {
        "1": {
          "name": "keyword.control.wacc"
        },
        "2": {
          "name": "variable.other.wacc"
        }
      }
    },
    "class-declaration": {
      "patterns": [
        {
          "name": "support.class.wacc",
          "match": "\\b(class)\\b"
        },
        {
          "name": "keyword.other.wacc",
          "match": "\\b(extends)\\b"
        }
      ]
    }
	},
	"scopeName": "source.wacc"
}